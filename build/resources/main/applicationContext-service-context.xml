<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
				http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd"
       default-autowire="byName" default-lazy-init="true">

    <!-- 商务逻辑处理BEAN,在类里加上 @Service("ApkInfoService") 的声明  -->
    <context:component-scan base-package="com.pkuvr.game_server.service"/>
    <context:component-scan base-package="com.pkuvr.game_server.protoservice"/>
    <context:component-scan base-package="com.pkuvr.game_server.utils"/>
    <context:component-scan base-package="com.pkuvr.game_server.network.clientpackets"/><!-- 扫描接收处理包 -->
    <context:component-scan base-package="com.pkuvr.game_server.network.commons"/><!-- 扫描公共信息构造模块 -->
    <context:component-scan base-package="com.pkuvr.timetask.service.quartz"/>

    <!-- 主程序BEAN -->
    <bean id="crossServerMain" class="com.pkuvr.game_server.main.CrossServerMain" scope="singleton"/>

    <bean id="gameServer" class="com.pkuvr.game_server.NettyGameServer" scope="singleton" destroy-method="shutDown">
        <constructor-arg index="0" value="#{serverConfig['game.socket.port']}"/>
    </bean>

    <!-- 线程池,自带定时执行的线程池 -->
    <bean id="threadPoolManager" class="com.pkuvr.commons.utils.ThreadPoolManager" scope="singleton"/>

    <bean id="pvpDeployTaskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler"
          scope="singleton">
        <!-- 核心线程数 -->
        <property name="poolSize" value="10"/>
    </bean>

    <!-- 为了给每一个Channel通道创建一个新的Handler实例，我们需要实现一个ChannelPipelineFactory管道工厂 -->
    <bean id="gameServerPipeLineFactory" class="com.pkuvr.game_server.network.GameServerPipeLineFactory"
          scope="singleton"/>

    <!-- ChannelGroup是Java 集合 API的一个特有扩展，ChannelGroup内部持有所有打开状态的Channel通道。 -->
    <!-- 如果一个Channel通道对象被加入到ChannelGroup，如果这个Channel通道被关闭，ChannelGroup将自动移除这个关闭的Channel通道对象。 -->
    <!-- 此外，你还可以对一个ChannelGroup对象内部的所有Channel通道对象执行相同的操作。 -->
    <!-- 例如，当你关闭服务端应用时你可以关闭一个ChannelGroup内部的所有Channel通道对象。 -->
    <bean id="channelGroup" class="org.jboss.netty.channel.group.DefaultChannelGroup" scope="singleton">
        <constructor-arg index="0" value="CrossServer"/>
    </bean>

    <!-- 扫描接收处理包 -->
    <bean id="cms" class="com.pkuvr.game_server.network.ScanPackage" scope="singleton" init-method="init">
        <constructor-arg index="0" value="com.pkuvr.game_server.network.clientpackets"/>
    </bean>
    <!-- 扫描发送包 -->
    <bean id="sms" class="com.pkuvr.game_server.network.ScanPackage" scope="singleton" init-method="init">
        <constructor-arg index="0" value="com.pkuvr.game_server.network.serverpackets"/>
    </bean>

    <bean id="gameServerSendService" class="com.pkuvr.game_server.network.GameServerSendService" scope="singleton"/>
</beans>












