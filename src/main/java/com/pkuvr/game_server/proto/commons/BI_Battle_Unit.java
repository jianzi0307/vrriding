// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BI_Battle_Unit.proto

package com.pkuvr.game_server.proto.commons;

public final class BI_Battle_Unit {
    private static com.google.protobuf.Descriptors.Descriptor
            internal_static_Battle_Unit_descriptor;
    private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internal_static_Battle_Unit_fieldAccessorTable;
    private static com.google.protobuf.Descriptors.Descriptor
            internal_static_Battle_Unit_Skill_descriptor;
    private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internal_static_Battle_Unit_Skill_fieldAccessorTable;
    private static com.google.protobuf.Descriptors.FileDescriptor
            descriptor;

    static {
        String[] descriptorData = {
                "\n\024BI_Battle_Unit.proto\"\232\007\n\013Battle_Unit\022\024" +
                        "\n\014battleUnitID\030\001 \001(\005\022\021\n\tunitLevel\030\002 \001(\005\022" +
                        "\022\n\nstorageNum\030\003 \001(\005\022\016\n\006campID\030\004 \001(\005\022\014\n\004t" +
                        "ype\030\005 \001(\005\022\017\n\007subType\030\006 \001(\005\022\022\n\ncannonType" +
                        "\030\007 \001(\005\022\023\n\013modelAmount\030\010 \001(\005\022\020\n\010effectID\030" +
                        "\t \001(\005\022\020\n\010nameInCh\030\n \001(\005\022\020\n\010nameInEn\030\013 \001(" +
                        "\005\022\r\n\005model\030\014 \001(\t\022\014\n\004icon\030\r \001(\t\022\016\n\006health" +
                        "\030\016 \001(\005\022\024\n\014attackDamage\030\017 \001(\005\022\022\n\nfrontArm" +
                        "or\030\020 \001(\005\022\021\n\tsideArmor\030\021 \001(\005\022\027\n\017attackFre" +
                        "quency\030\022 \001(\002\022\023\n\013attackRange\030\023 \001(\002\022\026\n\016dis",
                "AttackRange\030\024 \001(\002\022\022\n\nsightRange\030\025 \001(\002\022\024\n" +
                        "\014speedOnGrass\030\026 \001(\002\022\023\n\013speedOnHill\030\027 \001(\002" +
                        "\022\023\n\013speedOnSand\030\030 \001(\002\022\023\n\013speedOnSnow\030\031 \001" +
                        "(\002\022\023\n\013speedOnRoad\030\032 \001(\002\022\025\n\rrotationSpeed" +
                        "\030\033 \001(\002\022\024\n\014accurateRate\030\034 \001(\002\022\021\n\tdodgeRat" +
                        "e\030\035 \001(\002\022\020\n\010critRate\030\036 \001(\002\022\022\n\ninnerRange\030" +
                        "\037 \001(\002\022\027\n\017innerDamageRate\030  \001(\002\022\022\n\nouterR" +
                        "ange\030! \001(\002\022\027\n\017outerDamageRate\030\" \001(\002\022\024\n\014s" +
                        "peedForView\030# \001(\t\022\032\n\022enginePowerForView\030" +
                        "$ \001(\t\022\025\n\rweightForView\030% \001(\t\022\023\n\013rewardPo",
                "wer\030& \001(\005\022\025\n\rdeathParticle\030\' \001(\t\022\023\n\013deat" +
                        "hAction\030( \001(\t\022\022\n\nclassLevel\030) \001(\005\022!\n\005ski" +
                        "ll\030, \003(\0132\022.Battle_Unit.Skill\032%\n\005Skill\022\r\n" +
                        "\005skill\030\001 \002(\005\022\r\n\005level\030\002 \002(\005B3\n!com.gfan." +
                        "gameserver.proto.commonsB\016BI_Battle_Unit"
        };
        com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
                new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
                    public com.google.protobuf.ExtensionRegistry assignDescriptors(
                            com.google.protobuf.Descriptors.FileDescriptor root) {
                        descriptor = root;
                        internal_static_Battle_Unit_descriptor =
                                getDescriptor().getMessageTypes().get(0);
                        internal_static_Battle_Unit_fieldAccessorTable = new
                                com.google.protobuf.GeneratedMessage.FieldAccessorTable(
                                internal_static_Battle_Unit_descriptor,
                                new String[]{"BattleUnitID", "UnitLevel", "StorageNum", "CampID", "Type", "SubType", "CannonType", "ModelAmount", "EffectID", "NameInCh", "NameInEn", "Model", "Icon", "Health", "AttackDamage", "FrontArmor", "SideArmor", "AttackFrequency", "AttackRange", "DisAttackRange", "SightRange", "SpeedOnGrass", "SpeedOnHill", "SpeedOnSand", "SpeedOnSnow", "SpeedOnRoad", "RotationSpeed", "AccurateRate", "DodgeRate", "CritRate", "InnerRange", "InnerDamageRate", "OuterRange", "OuterDamageRate", "SpeedForView", "EnginePowerForView", "WeightForView", "RewardPower", "DeathParticle", "DeathAction", "ClassLevel", "Skill",},
                                com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.class,
                                com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.Builder.class);
                        internal_static_Battle_Unit_Skill_descriptor =
                                internal_static_Battle_Unit_descriptor.getNestedTypes().get(0);
                        internal_static_Battle_Unit_Skill_fieldAccessorTable = new
                                com.google.protobuf.GeneratedMessage.FieldAccessorTable(
                                internal_static_Battle_Unit_Skill_descriptor,
                                new String[]{"Skill", "Level",},
                                com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.Skill.class,
                                com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.Skill.Builder.class);
                        return null;
                    }
                };
        com.google.protobuf.Descriptors.FileDescriptor
                .internalBuildGeneratedFileFrom(descriptorData,
                        new com.google.protobuf.Descriptors.FileDescriptor[]{
                        }, assigner);
    }
    private BI_Battle_Unit() {
    }

    public static void registerAllExtensions(
            com.google.protobuf.ExtensionRegistry registry) {
    }

    public static com.google.protobuf.Descriptors.FileDescriptor
    getDescriptor() {
        return descriptor;
    }

    public interface Battle_UnitOrBuilder
            extends com.google.protobuf.MessageOrBuilder {

        // optional int32 battleUnitID = 1;
        boolean hasBattleUnitID();

        int getBattleUnitID();

        // optional int32 unitLevel = 2;
        boolean hasUnitLevel();

        int getUnitLevel();

        // optional int32 storageNum = 3;
        boolean hasStorageNum();

        int getStorageNum();

        // optional int32 campID = 4;
        boolean hasCampID();

        int getCampID();

        // optional int32 type = 5;
        boolean hasType();

        int getType();

        // optional int32 subType = 6;
        boolean hasSubType();

        int getSubType();

        // optional int32 cannonType = 7;
        boolean hasCannonType();

        int getCannonType();

        // optional int32 modelAmount = 8;
        boolean hasModelAmount();

        int getModelAmount();

        // optional int32 effectID = 9;
        boolean hasEffectID();

        int getEffectID();

        // optional int32 nameInCh = 10;
        boolean hasNameInCh();

        int getNameInCh();

        // optional int32 nameInEn = 11;
        boolean hasNameInEn();

        int getNameInEn();

        // optional string model = 12;
        boolean hasModel();

        String getModel();

        // optional string icon = 13;
        boolean hasIcon();

        String getIcon();

        // optional int32 health = 14;
        boolean hasHealth();

        int getHealth();

        // optional int32 attackDamage = 15;
        boolean hasAttackDamage();

        int getAttackDamage();

        // optional int32 frontArmor = 16;
        boolean hasFrontArmor();

        int getFrontArmor();

        // optional int32 sideArmor = 17;
        boolean hasSideArmor();

        int getSideArmor();

        // optional float attackFrequency = 18;
        boolean hasAttackFrequency();

        float getAttackFrequency();

        // optional float attackRange = 19;
        boolean hasAttackRange();

        float getAttackRange();

        // optional float disAttackRange = 20;
        boolean hasDisAttackRange();

        float getDisAttackRange();

        // optional float sightRange = 21;
        boolean hasSightRange();

        float getSightRange();

        // optional float speedOnGrass = 22;
        boolean hasSpeedOnGrass();

        float getSpeedOnGrass();

        // optional float speedOnHill = 23;
        boolean hasSpeedOnHill();

        float getSpeedOnHill();

        // optional float speedOnSand = 24;
        boolean hasSpeedOnSand();

        float getSpeedOnSand();

        // optional float speedOnSnow = 25;
        boolean hasSpeedOnSnow();

        float getSpeedOnSnow();

        // optional float speedOnRoad = 26;
        boolean hasSpeedOnRoad();

        float getSpeedOnRoad();

        // optional float rotationSpeed = 27;
        boolean hasRotationSpeed();

        float getRotationSpeed();

        // optional float accurateRate = 28;
        boolean hasAccurateRate();

        float getAccurateRate();

        // optional float dodgeRate = 29;
        boolean hasDodgeRate();

        float getDodgeRate();

        // optional float critRate = 30;
        boolean hasCritRate();

        float getCritRate();

        // optional float innerRange = 31;
        boolean hasInnerRange();

        float getInnerRange();

        // optional float innerDamageRate = 32;
        boolean hasInnerDamageRate();

        float getInnerDamageRate();

        // optional float outerRange = 33;
        boolean hasOuterRange();

        float getOuterRange();

        // optional float outerDamageRate = 34;
        boolean hasOuterDamageRate();

        float getOuterDamageRate();

        // optional string speedForView = 35;
        boolean hasSpeedForView();

        String getSpeedForView();

        // optional string enginePowerForView = 36;
        boolean hasEnginePowerForView();

        String getEnginePowerForView();

        // optional string weightForView = 37;
        boolean hasWeightForView();

        String getWeightForView();

        // optional int32 rewardPower = 38;
        boolean hasRewardPower();

        int getRewardPower();

        // optional string deathParticle = 39;
        boolean hasDeathParticle();

        String getDeathParticle();

        // optional string deathAction = 40;
        boolean hasDeathAction();

        String getDeathAction();

        // optional int32 classLevel = 41;
        boolean hasClassLevel();

        int getClassLevel();

        // repeated .Battle_Unit.Skill skill = 44;
        java.util.List<com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.Skill>
        getSkillList();

        com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.Skill getSkill(int index);

        int getSkillCount();

        java.util.List<? extends com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.SkillOrBuilder>
        getSkillOrBuilderList();

        com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.SkillOrBuilder getSkillOrBuilder(
                int index);
    }

    public static final class Battle_Unit extends
            com.google.protobuf.GeneratedMessage
            implements Battle_UnitOrBuilder {
        // optional int32 battleUnitID = 1;
        public static final int BATTLEUNITID_FIELD_NUMBER = 1;
        // optional int32 unitLevel = 2;
        public static final int UNITLEVEL_FIELD_NUMBER = 2;
        // optional int32 storageNum = 3;
        public static final int STORAGENUM_FIELD_NUMBER = 3;
        // optional int32 campID = 4;
        public static final int CAMPID_FIELD_NUMBER = 4;
        // optional int32 type = 5;
        public static final int TYPE_FIELD_NUMBER = 5;
        // optional int32 subType = 6;
        public static final int SUBTYPE_FIELD_NUMBER = 6;
        // optional int32 cannonType = 7;
        public static final int CANNONTYPE_FIELD_NUMBER = 7;
        // optional int32 modelAmount = 8;
        public static final int MODELAMOUNT_FIELD_NUMBER = 8;
        // optional int32 effectID = 9;
        public static final int EFFECTID_FIELD_NUMBER = 9;
        // optional int32 nameInCh = 10;
        public static final int NAMEINCH_FIELD_NUMBER = 10;
        // optional int32 nameInEn = 11;
        public static final int NAMEINEN_FIELD_NUMBER = 11;
        // optional string model = 12;
        public static final int MODEL_FIELD_NUMBER = 12;
        // optional string icon = 13;
        public static final int ICON_FIELD_NUMBER = 13;
        // optional int32 health = 14;
        public static final int HEALTH_FIELD_NUMBER = 14;
        // optional int32 attackDamage = 15;
        public static final int ATTACKDAMAGE_FIELD_NUMBER = 15;
        // optional int32 frontArmor = 16;
        public static final int FRONTARMOR_FIELD_NUMBER = 16;
        // optional int32 sideArmor = 17;
        public static final int SIDEARMOR_FIELD_NUMBER = 17;
        // optional float attackFrequency = 18;
        public static final int ATTACKFREQUENCY_FIELD_NUMBER = 18;
        // optional float attackRange = 19;
        public static final int ATTACKRANGE_FIELD_NUMBER = 19;
        // optional float disAttackRange = 20;
        public static final int DISATTACKRANGE_FIELD_NUMBER = 20;
        // optional float sightRange = 21;
        public static final int SIGHTRANGE_FIELD_NUMBER = 21;
        // optional float speedOnGrass = 22;
        public static final int SPEEDONGRASS_FIELD_NUMBER = 22;
        // optional float speedOnHill = 23;
        public static final int SPEEDONHILL_FIELD_NUMBER = 23;
        // optional float speedOnSand = 24;
        public static final int SPEEDONSAND_FIELD_NUMBER = 24;
        // optional float speedOnSnow = 25;
        public static final int SPEEDONSNOW_FIELD_NUMBER = 25;
        // optional float speedOnRoad = 26;
        public static final int SPEEDONROAD_FIELD_NUMBER = 26;
        // optional float rotationSpeed = 27;
        public static final int ROTATIONSPEED_FIELD_NUMBER = 27;
        // optional float accurateRate = 28;
        public static final int ACCURATERATE_FIELD_NUMBER = 28;
        // optional float dodgeRate = 29;
        public static final int DODGERATE_FIELD_NUMBER = 29;
        // optional float critRate = 30;
        public static final int CRITRATE_FIELD_NUMBER = 30;
        // optional float innerRange = 31;
        public static final int INNERRANGE_FIELD_NUMBER = 31;
        // optional float innerDamageRate = 32;
        public static final int INNERDAMAGERATE_FIELD_NUMBER = 32;
        // optional float outerRange = 33;
        public static final int OUTERRANGE_FIELD_NUMBER = 33;
        // optional float outerDamageRate = 34;
        public static final int OUTERDAMAGERATE_FIELD_NUMBER = 34;
        // optional string speedForView = 35;
        public static final int SPEEDFORVIEW_FIELD_NUMBER = 35;
        // optional string enginePowerForView = 36;
        public static final int ENGINEPOWERFORVIEW_FIELD_NUMBER = 36;
        // optional string weightForView = 37;
        public static final int WEIGHTFORVIEW_FIELD_NUMBER = 37;
        // optional int32 rewardPower = 38;
        public static final int REWARDPOWER_FIELD_NUMBER = 38;
        // optional string deathParticle = 39;
        public static final int DEATHPARTICLE_FIELD_NUMBER = 39;
        // optional string deathAction = 40;
        public static final int DEATHACTION_FIELD_NUMBER = 40;
        // optional int32 classLevel = 41;
        public static final int CLASSLEVEL_FIELD_NUMBER = 41;
        // repeated .Battle_Unit.Skill skill = 44;
        public static final int SKILL_FIELD_NUMBER = 44;
        private static final Battle_Unit defaultInstance;
        private static final long serialVersionUID = 0L;

        static {
            defaultInstance = new Battle_Unit(true);
            defaultInstance.initFields();
        }

        private int bitField0_;
        private int bitField1_;
        private int battleUnitID_;
        private int unitLevel_;
        private int storageNum_;
        private int campID_;
        private int type_;
        private int subType_;
        private int cannonType_;
        private int modelAmount_;
        private int effectID_;
        private int nameInCh_;
        private int nameInEn_;
        private Object model_;
        private Object icon_;
        private int health_;
        private int attackDamage_;
        private int frontArmor_;
        private int sideArmor_;
        private float attackFrequency_;
        private float attackRange_;
        private float disAttackRange_;
        private float sightRange_;
        private float speedOnGrass_;
        private float speedOnHill_;
        private float speedOnSand_;
        private float speedOnSnow_;
        private float speedOnRoad_;
        private float rotationSpeed_;
        private float accurateRate_;
        private float dodgeRate_;
        private float critRate_;
        private float innerRange_;
        private float innerDamageRate_;
        private float outerRange_;
        private float outerDamageRate_;
        private Object speedForView_;
        private Object enginePowerForView_;
        private Object weightForView_;
        private int rewardPower_;
        private Object deathParticle_;
        private Object deathAction_;
        private int classLevel_;
        private java.util.List<com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.Skill> skill_;
        private byte memoizedIsInitialized = -1;
        private int memoizedSerializedSize = -1;

        // Use Battle_Unit.newBuilder() to construct.
        private Battle_Unit(Builder builder) {
            super(builder);
        }

        private Battle_Unit(boolean noInit) {
        }

        public static Battle_Unit getDefaultInstance() {
            return defaultInstance;
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return com.pkuvr.game_server.proto.commons.BI_Battle_Unit.internal_static_Battle_Unit_descriptor;
        }

        public static com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return newBuilder().mergeFrom(data).buildParsed();
        }

        public static com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return newBuilder().mergeFrom(data, extensionRegistry)
                    .buildParsed();
        }

        public static com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return newBuilder().mergeFrom(data).buildParsed();
        }

        public static com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return newBuilder().mergeFrom(data, extensionRegistry)
                    .buildParsed();
        }

        public static com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return newBuilder().mergeFrom(input).buildParsed();
        }

        public static com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return newBuilder().mergeFrom(input, extensionRegistry)
                    .buildParsed();
        }

        public static com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            Builder builder = newBuilder();
            if (builder.mergeDelimitedFrom(input)) {
                return builder.buildParsed();
            } else {
                return null;
            }
        }

        public static com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            Builder builder = newBuilder();
            if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
                return builder.buildParsed();
            } else {
                return null;
            }
        }

        public static com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return newBuilder().mergeFrom(input).buildParsed();
        }

        public static com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return newBuilder().mergeFrom(input, extensionRegistry)
                    .buildParsed();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public static Builder newBuilder(com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Battle_Unit getDefaultInstanceForType() {
            return defaultInstance;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return com.pkuvr.game_server.proto.commons.BI_Battle_Unit.internal_static_Battle_Unit_fieldAccessorTable;
        }

        public boolean hasBattleUnitID() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        public int getBattleUnitID() {
            return battleUnitID_;
        }

        public boolean hasUnitLevel() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }

        public int getUnitLevel() {
            return unitLevel_;
        }

        public boolean hasStorageNum() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
        }

        public int getStorageNum() {
            return storageNum_;
        }

        public boolean hasCampID() {
            return ((bitField0_ & 0x00000008) == 0x00000008);
        }

        public int getCampID() {
            return campID_;
        }

        public boolean hasType() {
            return ((bitField0_ & 0x00000010) == 0x00000010);
        }

        public int getType() {
            return type_;
        }

        public boolean hasSubType() {
            return ((bitField0_ & 0x00000020) == 0x00000020);
        }

        public int getSubType() {
            return subType_;
        }

        public boolean hasCannonType() {
            return ((bitField0_ & 0x00000040) == 0x00000040);
        }

        public int getCannonType() {
            return cannonType_;
        }

        public boolean hasModelAmount() {
            return ((bitField0_ & 0x00000080) == 0x00000080);
        }

        public int getModelAmount() {
            return modelAmount_;
        }

        public boolean hasEffectID() {
            return ((bitField0_ & 0x00000100) == 0x00000100);
        }

        public int getEffectID() {
            return effectID_;
        }

        public boolean hasNameInCh() {
            return ((bitField0_ & 0x00000200) == 0x00000200);
        }

        public int getNameInCh() {
            return nameInCh_;
        }

        public boolean hasNameInEn() {
            return ((bitField0_ & 0x00000400) == 0x00000400);
        }

        public int getNameInEn() {
            return nameInEn_;
        }

        public boolean hasModel() {
            return ((bitField0_ & 0x00000800) == 0x00000800);
        }

        public String getModel() {
            Object ref = model_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                if (com.google.protobuf.Internal.isValidUtf8(bs)) {
                    model_ = s;
                }
                return s;
            }
        }

        private com.google.protobuf.ByteString getModelBytes() {
            Object ref = model_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8((String) ref);
                model_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        public boolean hasIcon() {
            return ((bitField0_ & 0x00001000) == 0x00001000);
        }

        public String getIcon() {
            Object ref = icon_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                if (com.google.protobuf.Internal.isValidUtf8(bs)) {
                    icon_ = s;
                }
                return s;
            }
        }

        private com.google.protobuf.ByteString getIconBytes() {
            Object ref = icon_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8((String) ref);
                icon_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        public boolean hasHealth() {
            return ((bitField0_ & 0x00002000) == 0x00002000);
        }

        public int getHealth() {
            return health_;
        }

        public boolean hasAttackDamage() {
            return ((bitField0_ & 0x00004000) == 0x00004000);
        }

        public int getAttackDamage() {
            return attackDamage_;
        }

        public boolean hasFrontArmor() {
            return ((bitField0_ & 0x00008000) == 0x00008000);
        }

        public int getFrontArmor() {
            return frontArmor_;
        }

        public boolean hasSideArmor() {
            return ((bitField0_ & 0x00010000) == 0x00010000);
        }

        public int getSideArmor() {
            return sideArmor_;
        }

        public boolean hasAttackFrequency() {
            return ((bitField0_ & 0x00020000) == 0x00020000);
        }

        public float getAttackFrequency() {
            return attackFrequency_;
        }

        public boolean hasAttackRange() {
            return ((bitField0_ & 0x00040000) == 0x00040000);
        }

        public float getAttackRange() {
            return attackRange_;
        }

        public boolean hasDisAttackRange() {
            return ((bitField0_ & 0x00080000) == 0x00080000);
        }

        public float getDisAttackRange() {
            return disAttackRange_;
        }

        public boolean hasSightRange() {
            return ((bitField0_ & 0x00100000) == 0x00100000);
        }

        public float getSightRange() {
            return sightRange_;
        }

        public boolean hasSpeedOnGrass() {
            return ((bitField0_ & 0x00200000) == 0x00200000);
        }

        public float getSpeedOnGrass() {
            return speedOnGrass_;
        }

        public boolean hasSpeedOnHill() {
            return ((bitField0_ & 0x00400000) == 0x00400000);
        }

        public float getSpeedOnHill() {
            return speedOnHill_;
        }

        public boolean hasSpeedOnSand() {
            return ((bitField0_ & 0x00800000) == 0x00800000);
        }

        public float getSpeedOnSand() {
            return speedOnSand_;
        }

        public boolean hasSpeedOnSnow() {
            return ((bitField0_ & 0x01000000) == 0x01000000);
        }

        public float getSpeedOnSnow() {
            return speedOnSnow_;
        }

        public boolean hasSpeedOnRoad() {
            return ((bitField0_ & 0x02000000) == 0x02000000);
        }

        public float getSpeedOnRoad() {
            return speedOnRoad_;
        }

        public boolean hasRotationSpeed() {
            return ((bitField0_ & 0x04000000) == 0x04000000);
        }

        public float getRotationSpeed() {
            return rotationSpeed_;
        }

        public boolean hasAccurateRate() {
            return ((bitField0_ & 0x08000000) == 0x08000000);
        }

        public float getAccurateRate() {
            return accurateRate_;
        }

        public boolean hasDodgeRate() {
            return ((bitField0_ & 0x10000000) == 0x10000000);
        }

        public float getDodgeRate() {
            return dodgeRate_;
        }

        public boolean hasCritRate() {
            return ((bitField0_ & 0x20000000) == 0x20000000);
        }

        public float getCritRate() {
            return critRate_;
        }

        public boolean hasInnerRange() {
            return ((bitField0_ & 0x40000000) == 0x40000000);
        }

        public float getInnerRange() {
            return innerRange_;
        }

        public boolean hasInnerDamageRate() {
            return ((bitField0_ & 0x80000000) == 0x80000000);
        }

        public float getInnerDamageRate() {
            return innerDamageRate_;
        }

        public boolean hasOuterRange() {
            return ((bitField1_ & 0x00000001) == 0x00000001);
        }

        public float getOuterRange() {
            return outerRange_;
        }

        public boolean hasOuterDamageRate() {
            return ((bitField1_ & 0x00000002) == 0x00000002);
        }

        public float getOuterDamageRate() {
            return outerDamageRate_;
        }

        public boolean hasSpeedForView() {
            return ((bitField1_ & 0x00000004) == 0x00000004);
        }

        public String getSpeedForView() {
            Object ref = speedForView_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                if (com.google.protobuf.Internal.isValidUtf8(bs)) {
                    speedForView_ = s;
                }
                return s;
            }
        }

        private com.google.protobuf.ByteString getSpeedForViewBytes() {
            Object ref = speedForView_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8((String) ref);
                speedForView_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        public boolean hasEnginePowerForView() {
            return ((bitField1_ & 0x00000008) == 0x00000008);
        }

        public String getEnginePowerForView() {
            Object ref = enginePowerForView_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                if (com.google.protobuf.Internal.isValidUtf8(bs)) {
                    enginePowerForView_ = s;
                }
                return s;
            }
        }

        private com.google.protobuf.ByteString getEnginePowerForViewBytes() {
            Object ref = enginePowerForView_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8((String) ref);
                enginePowerForView_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        public boolean hasWeightForView() {
            return ((bitField1_ & 0x00000010) == 0x00000010);
        }

        public String getWeightForView() {
            Object ref = weightForView_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                if (com.google.protobuf.Internal.isValidUtf8(bs)) {
                    weightForView_ = s;
                }
                return s;
            }
        }

        private com.google.protobuf.ByteString getWeightForViewBytes() {
            Object ref = weightForView_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8((String) ref);
                weightForView_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        public boolean hasRewardPower() {
            return ((bitField1_ & 0x00000020) == 0x00000020);
        }

        public int getRewardPower() {
            return rewardPower_;
        }

        public boolean hasDeathParticle() {
            return ((bitField1_ & 0x00000040) == 0x00000040);
        }

        public String getDeathParticle() {
            Object ref = deathParticle_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                if (com.google.protobuf.Internal.isValidUtf8(bs)) {
                    deathParticle_ = s;
                }
                return s;
            }
        }

        private com.google.protobuf.ByteString getDeathParticleBytes() {
            Object ref = deathParticle_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8((String) ref);
                deathParticle_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        public boolean hasDeathAction() {
            return ((bitField1_ & 0x00000080) == 0x00000080);
        }

        public String getDeathAction() {
            Object ref = deathAction_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                com.google.protobuf.ByteString bs =
                        (com.google.protobuf.ByteString) ref;
                String s = bs.toStringUtf8();
                if (com.google.protobuf.Internal.isValidUtf8(bs)) {
                    deathAction_ = s;
                }
                return s;
            }
        }

        private com.google.protobuf.ByteString getDeathActionBytes() {
            Object ref = deathAction_;
            if (ref instanceof String) {
                com.google.protobuf.ByteString b =
                        com.google.protobuf.ByteString.copyFromUtf8((String) ref);
                deathAction_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        public boolean hasClassLevel() {
            return ((bitField1_ & 0x00000100) == 0x00000100);
        }

        public int getClassLevel() {
            return classLevel_;
        }

        public java.util.List<com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.Skill> getSkillList() {
            return skill_;
        }

        public java.util.List<? extends com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.SkillOrBuilder>
        getSkillOrBuilderList() {
            return skill_;
        }

        public int getSkillCount() {
            return skill_.size();
        }

        public com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.Skill getSkill(int index) {
            return skill_.get(index);
        }

        public com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.SkillOrBuilder getSkillOrBuilder(
                int index) {
            return skill_.get(index);
        }

        private void initFields() {
            battleUnitID_ = 0;
            unitLevel_ = 0;
            storageNum_ = 0;
            campID_ = 0;
            type_ = 0;
            subType_ = 0;
            cannonType_ = 0;
            modelAmount_ = 0;
            effectID_ = 0;
            nameInCh_ = 0;
            nameInEn_ = 0;
            model_ = "";
            icon_ = "";
            health_ = 0;
            attackDamage_ = 0;
            frontArmor_ = 0;
            sideArmor_ = 0;
            attackFrequency_ = 0F;
            attackRange_ = 0F;
            disAttackRange_ = 0F;
            sightRange_ = 0F;
            speedOnGrass_ = 0F;
            speedOnHill_ = 0F;
            speedOnSand_ = 0F;
            speedOnSnow_ = 0F;
            speedOnRoad_ = 0F;
            rotationSpeed_ = 0F;
            accurateRate_ = 0F;
            dodgeRate_ = 0F;
            critRate_ = 0F;
            innerRange_ = 0F;
            innerDamageRate_ = 0F;
            outerRange_ = 0F;
            outerDamageRate_ = 0F;
            speedForView_ = "";
            enginePowerForView_ = "";
            weightForView_ = "";
            rewardPower_ = 0;
            deathParticle_ = "";
            deathAction_ = "";
            classLevel_ = 0;
            skill_ = java.util.Collections.emptyList();
        }

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized != -1) return isInitialized == 1;

            for (int i = 0; i < getSkillCount(); i++) {
                if (!getSkill(i).isInitialized()) {
                    memoizedIsInitialized = 0;
                    return false;
                }
            }
            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            getSerializedSize();
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeInt32(1, battleUnitID_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeInt32(2, unitLevel_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                output.writeInt32(3, storageNum_);
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                output.writeInt32(4, campID_);
            }
            if (((bitField0_ & 0x00000010) == 0x00000010)) {
                output.writeInt32(5, type_);
            }
            if (((bitField0_ & 0x00000020) == 0x00000020)) {
                output.writeInt32(6, subType_);
            }
            if (((bitField0_ & 0x00000040) == 0x00000040)) {
                output.writeInt32(7, cannonType_);
            }
            if (((bitField0_ & 0x00000080) == 0x00000080)) {
                output.writeInt32(8, modelAmount_);
            }
            if (((bitField0_ & 0x00000100) == 0x00000100)) {
                output.writeInt32(9, effectID_);
            }
            if (((bitField0_ & 0x00000200) == 0x00000200)) {
                output.writeInt32(10, nameInCh_);
            }
            if (((bitField0_ & 0x00000400) == 0x00000400)) {
                output.writeInt32(11, nameInEn_);
            }
            if (((bitField0_ & 0x00000800) == 0x00000800)) {
                output.writeBytes(12, getModelBytes());
            }
            if (((bitField0_ & 0x00001000) == 0x00001000)) {
                output.writeBytes(13, getIconBytes());
            }
            if (((bitField0_ & 0x00002000) == 0x00002000)) {
                output.writeInt32(14, health_);
            }
            if (((bitField0_ & 0x00004000) == 0x00004000)) {
                output.writeInt32(15, attackDamage_);
            }
            if (((bitField0_ & 0x00008000) == 0x00008000)) {
                output.writeInt32(16, frontArmor_);
            }
            if (((bitField0_ & 0x00010000) == 0x00010000)) {
                output.writeInt32(17, sideArmor_);
            }
            if (((bitField0_ & 0x00020000) == 0x00020000)) {
                output.writeFloat(18, attackFrequency_);
            }
            if (((bitField0_ & 0x00040000) == 0x00040000)) {
                output.writeFloat(19, attackRange_);
            }
            if (((bitField0_ & 0x00080000) == 0x00080000)) {
                output.writeFloat(20, disAttackRange_);
            }
            if (((bitField0_ & 0x00100000) == 0x00100000)) {
                output.writeFloat(21, sightRange_);
            }
            if (((bitField0_ & 0x00200000) == 0x00200000)) {
                output.writeFloat(22, speedOnGrass_);
            }
            if (((bitField0_ & 0x00400000) == 0x00400000)) {
                output.writeFloat(23, speedOnHill_);
            }
            if (((bitField0_ & 0x00800000) == 0x00800000)) {
                output.writeFloat(24, speedOnSand_);
            }
            if (((bitField0_ & 0x01000000) == 0x01000000)) {
                output.writeFloat(25, speedOnSnow_);
            }
            if (((bitField0_ & 0x02000000) == 0x02000000)) {
                output.writeFloat(26, speedOnRoad_);
            }
            if (((bitField0_ & 0x04000000) == 0x04000000)) {
                output.writeFloat(27, rotationSpeed_);
            }
            if (((bitField0_ & 0x08000000) == 0x08000000)) {
                output.writeFloat(28, accurateRate_);
            }
            if (((bitField0_ & 0x10000000) == 0x10000000)) {
                output.writeFloat(29, dodgeRate_);
            }
            if (((bitField0_ & 0x20000000) == 0x20000000)) {
                output.writeFloat(30, critRate_);
            }
            if (((bitField0_ & 0x40000000) == 0x40000000)) {
                output.writeFloat(31, innerRange_);
            }
            if (((bitField0_ & 0x80000000) == 0x80000000)) {
                output.writeFloat(32, innerDamageRate_);
            }
            if (((bitField1_ & 0x00000001) == 0x00000001)) {
                output.writeFloat(33, outerRange_);
            }
            if (((bitField1_ & 0x00000002) == 0x00000002)) {
                output.writeFloat(34, outerDamageRate_);
            }
            if (((bitField1_ & 0x00000004) == 0x00000004)) {
                output.writeBytes(35, getSpeedForViewBytes());
            }
            if (((bitField1_ & 0x00000008) == 0x00000008)) {
                output.writeBytes(36, getEnginePowerForViewBytes());
            }
            if (((bitField1_ & 0x00000010) == 0x00000010)) {
                output.writeBytes(37, getWeightForViewBytes());
            }
            if (((bitField1_ & 0x00000020) == 0x00000020)) {
                output.writeInt32(38, rewardPower_);
            }
            if (((bitField1_ & 0x00000040) == 0x00000040)) {
                output.writeBytes(39, getDeathParticleBytes());
            }
            if (((bitField1_ & 0x00000080) == 0x00000080)) {
                output.writeBytes(40, getDeathActionBytes());
            }
            if (((bitField1_ & 0x00000100) == 0x00000100)) {
                output.writeInt32(41, classLevel_);
            }
            for (int i = 0; i < skill_.size(); i++) {
                output.writeMessage(44, skill_.get(i));
            }
            getUnknownFields().writeTo(output);
        }

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(1, battleUnitID_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(2, unitLevel_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(3, storageNum_);
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(4, campID_);
            }
            if (((bitField0_ & 0x00000010) == 0x00000010)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(5, type_);
            }
            if (((bitField0_ & 0x00000020) == 0x00000020)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(6, subType_);
            }
            if (((bitField0_ & 0x00000040) == 0x00000040)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(7, cannonType_);
            }
            if (((bitField0_ & 0x00000080) == 0x00000080)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(8, modelAmount_);
            }
            if (((bitField0_ & 0x00000100) == 0x00000100)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(9, effectID_);
            }
            if (((bitField0_ & 0x00000200) == 0x00000200)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(10, nameInCh_);
            }
            if (((bitField0_ & 0x00000400) == 0x00000400)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(11, nameInEn_);
            }
            if (((bitField0_ & 0x00000800) == 0x00000800)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(12, getModelBytes());
            }
            if (((bitField0_ & 0x00001000) == 0x00001000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(13, getIconBytes());
            }
            if (((bitField0_ & 0x00002000) == 0x00002000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(14, health_);
            }
            if (((bitField0_ & 0x00004000) == 0x00004000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(15, attackDamage_);
            }
            if (((bitField0_ & 0x00008000) == 0x00008000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(16, frontArmor_);
            }
            if (((bitField0_ & 0x00010000) == 0x00010000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(17, sideArmor_);
            }
            if (((bitField0_ & 0x00020000) == 0x00020000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(18, attackFrequency_);
            }
            if (((bitField0_ & 0x00040000) == 0x00040000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(19, attackRange_);
            }
            if (((bitField0_ & 0x00080000) == 0x00080000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(20, disAttackRange_);
            }
            if (((bitField0_ & 0x00100000) == 0x00100000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(21, sightRange_);
            }
            if (((bitField0_ & 0x00200000) == 0x00200000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(22, speedOnGrass_);
            }
            if (((bitField0_ & 0x00400000) == 0x00400000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(23, speedOnHill_);
            }
            if (((bitField0_ & 0x00800000) == 0x00800000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(24, speedOnSand_);
            }
            if (((bitField0_ & 0x01000000) == 0x01000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(25, speedOnSnow_);
            }
            if (((bitField0_ & 0x02000000) == 0x02000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(26, speedOnRoad_);
            }
            if (((bitField0_ & 0x04000000) == 0x04000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(27, rotationSpeed_);
            }
            if (((bitField0_ & 0x08000000) == 0x08000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(28, accurateRate_);
            }
            if (((bitField0_ & 0x10000000) == 0x10000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(29, dodgeRate_);
            }
            if (((bitField0_ & 0x20000000) == 0x20000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(30, critRate_);
            }
            if (((bitField0_ & 0x40000000) == 0x40000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(31, innerRange_);
            }
            if (((bitField0_ & 0x80000000) == 0x80000000)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(32, innerDamageRate_);
            }
            if (((bitField1_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(33, outerRange_);
            }
            if (((bitField1_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeFloatSize(34, outerDamageRate_);
            }
            if (((bitField1_ & 0x00000004) == 0x00000004)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(35, getSpeedForViewBytes());
            }
            if (((bitField1_ & 0x00000008) == 0x00000008)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(36, getEnginePowerForViewBytes());
            }
            if (((bitField1_ & 0x00000010) == 0x00000010)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(37, getWeightForViewBytes());
            }
            if (((bitField1_ & 0x00000020) == 0x00000020)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(38, rewardPower_);
            }
            if (((bitField1_ & 0x00000040) == 0x00000040)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(39, getDeathParticleBytes());
            }
            if (((bitField1_ & 0x00000080) == 0x00000080)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(40, getDeathActionBytes());
            }
            if (((bitField1_ & 0x00000100) == 0x00000100)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeInt32Size(41, classLevel_);
            }
            for (int i = 0; i < skill_.size(); i++) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(44, skill_.get(i));
            }
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        @Override
        protected Object writeReplace()
                throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        @Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public interface SkillOrBuilder
                extends com.google.protobuf.MessageOrBuilder {

            // required int32 skill = 1;
            boolean hasSkill();

            int getSkill();

            // required int32 level = 2;
            boolean hasLevel();

            int getLevel();
        }

        public static final class Skill extends
                com.google.protobuf.GeneratedMessage
                implements SkillOrBuilder {
            // required int32 skill = 1;
            public static final int SKILL_FIELD_NUMBER = 1;
            // required int32 level = 2;
            public static final int LEVEL_FIELD_NUMBER = 2;
            private static final Skill defaultInstance;
            private static final long serialVersionUID = 0L;

            static {
                defaultInstance = new Skill(true);
                defaultInstance.initFields();
            }

            private int bitField0_;
            private int skill_;
            private int level_;
            private byte memoizedIsInitialized = -1;
            private int memoizedSerializedSize = -1;

            // Use Skill.newBuilder() to construct.
            private Skill(Builder builder) {
                super(builder);
            }

            private Skill(boolean noInit) {
            }

            public static Skill getDefaultInstance() {
                return defaultInstance;
            }

            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return com.pkuvr.game_server.proto.commons.BI_Battle_Unit.internal_static_Battle_Unit_Skill_descriptor;
            }

            public static com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.Skill parseFrom(
                    com.google.protobuf.ByteString data)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return newBuilder().mergeFrom(data).buildParsed();
            }

            public static com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.Skill parseFrom(
                    com.google.protobuf.ByteString data,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return newBuilder().mergeFrom(data, extensionRegistry)
                        .buildParsed();
            }

            public static com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.Skill parseFrom(byte[] data)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return newBuilder().mergeFrom(data).buildParsed();
            }

            public static com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.Skill parseFrom(
                    byte[] data,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return newBuilder().mergeFrom(data, extensionRegistry)
                        .buildParsed();
            }

            public static com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.Skill parseFrom(java.io.InputStream input)
                    throws java.io.IOException {
                return newBuilder().mergeFrom(input).buildParsed();
            }

            public static com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.Skill parseFrom(
                    java.io.InputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                return newBuilder().mergeFrom(input, extensionRegistry)
                        .buildParsed();
            }

            public static com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.Skill parseDelimitedFrom(java.io.InputStream input)
                    throws java.io.IOException {
                Builder builder = newBuilder();
                if (builder.mergeDelimitedFrom(input)) {
                    return builder.buildParsed();
                } else {
                    return null;
                }
            }

            public static com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.Skill parseDelimitedFrom(
                    java.io.InputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                Builder builder = newBuilder();
                if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
                    return builder.buildParsed();
                } else {
                    return null;
                }
            }

            public static com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.Skill parseFrom(
                    com.google.protobuf.CodedInputStream input)
                    throws java.io.IOException {
                return newBuilder().mergeFrom(input).buildParsed();
            }

            public static com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.Skill parseFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                return newBuilder().mergeFrom(input, extensionRegistry)
                        .buildParsed();
            }

            public static Builder newBuilder() {
                return Builder.create();
            }

            public static Builder newBuilder(com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.Skill prototype) {
                return newBuilder().mergeFrom(prototype);
            }

            public Skill getDefaultInstanceForType() {
                return defaultInstance;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return com.pkuvr.game_server.proto.commons.BI_Battle_Unit.internal_static_Battle_Unit_Skill_fieldAccessorTable;
            }

            public boolean hasSkill() {
                return ((bitField0_ & 0x00000001) == 0x00000001);
            }

            public int getSkill() {
                return skill_;
            }

            public boolean hasLevel() {
                return ((bitField0_ & 0x00000002) == 0x00000002);
            }

            public int getLevel() {
                return level_;
            }

            private void initFields() {
                skill_ = 0;
                level_ = 0;
            }

            public final boolean isInitialized() {
                byte isInitialized = memoizedIsInitialized;
                if (isInitialized != -1) return isInitialized == 1;

                if (!hasSkill()) {
                    memoizedIsInitialized = 0;
                    return false;
                }
                if (!hasLevel()) {
                    memoizedIsInitialized = 0;
                    return false;
                }
                memoizedIsInitialized = 1;
                return true;
            }

            public void writeTo(com.google.protobuf.CodedOutputStream output)
                    throws java.io.IOException {
                getSerializedSize();
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                    output.writeInt32(1, skill_);
                }
                if (((bitField0_ & 0x00000002) == 0x00000002)) {
                    output.writeInt32(2, level_);
                }
                getUnknownFields().writeTo(output);
            }

            public int getSerializedSize() {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                    size += com.google.protobuf.CodedOutputStream
                            .computeInt32Size(1, skill_);
                }
                if (((bitField0_ & 0x00000002) == 0x00000002)) {
                    size += com.google.protobuf.CodedOutputStream
                            .computeInt32Size(2, level_);
                }
                size += getUnknownFields().getSerializedSize();
                memoizedSerializedSize = size;
                return size;
            }

            @Override
            protected Object writeReplace()
                    throws java.io.ObjectStreamException {
                return super.writeReplace();
            }

            public Builder newBuilderForType() {
                return newBuilder();
            }

            public Builder toBuilder() {
                return newBuilder(this);
            }

            @Override
            protected Builder newBuilderForType(
                    com.google.protobuf.GeneratedMessage.BuilderParent parent) {
                Builder builder = new Builder(parent);
                return builder;
            }

            public static final class Builder extends
                    com.google.protobuf.GeneratedMessage.Builder<Builder>
                    implements com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.SkillOrBuilder {
                private int bitField0_;
                // required int32 skill = 1;
                private int skill_;
                // required int32 level = 2;
                private int level_;

                // Construct using com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.Skill.newBuilder()
                private Builder() {
                    maybeForceBuilderInitialization();
                }

                private Builder(BuilderParent parent) {
                    super(parent);
                    maybeForceBuilderInitialization();
                }

                public static final com.google.protobuf.Descriptors.Descriptor
                getDescriptor() {
                    return com.pkuvr.game_server.proto.commons.BI_Battle_Unit.internal_static_Battle_Unit_Skill_descriptor;
                }

                private static Builder create() {
                    return new Builder();
                }

                protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
                internalGetFieldAccessorTable() {
                    return com.pkuvr.game_server.proto.commons.BI_Battle_Unit.internal_static_Battle_Unit_Skill_fieldAccessorTable;
                }

                private void maybeForceBuilderInitialization() {
                    if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                    }
                }

                public Builder clear() {
                    super.clear();
                    skill_ = 0;
                    bitField0_ = (bitField0_ & ~0x00000001);
                    level_ = 0;
                    bitField0_ = (bitField0_ & ~0x00000002);
                    return this;
                }

                public Builder clone() {
                    return create().mergeFrom(buildPartial());
                }

                public com.google.protobuf.Descriptors.Descriptor
                getDescriptorForType() {
                    return com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.Skill.getDescriptor();
                }

                public com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.Skill getDefaultInstanceForType() {
                    return com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.Skill.getDefaultInstance();
                }

                public com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.Skill build() {
                    com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.Skill result = buildPartial();
                    if (!result.isInitialized()) {
                        throw newUninitializedMessageException(result);
                    }
                    return result;
                }

                private com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.Skill buildParsed()
                        throws com.google.protobuf.InvalidProtocolBufferException {
                    com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.Skill result = buildPartial();
                    if (!result.isInitialized()) {
                        throw newUninitializedMessageException(
                                result).asInvalidProtocolBufferException();
                    }
                    return result;
                }

                public com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.Skill buildPartial() {
                    com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.Skill result = new com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.Skill(this);
                    int from_bitField0_ = bitField0_;
                    int to_bitField0_ = 0;
                    if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                        to_bitField0_ |= 0x00000001;
                    }
                    result.skill_ = skill_;
                    if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                        to_bitField0_ |= 0x00000002;
                    }
                    result.level_ = level_;
                    result.bitField0_ = to_bitField0_;
                    onBuilt();
                    return result;
                }

                public Builder mergeFrom(com.google.protobuf.Message other) {
                    if (other instanceof com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.Skill) {
                        return mergeFrom((com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.Skill) other);
                    } else {
                        super.mergeFrom(other);
                        return this;
                    }
                }

                public Builder mergeFrom(com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.Skill other) {
                    if (other == com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.Skill.getDefaultInstance())
                        return this;
                    if (other.hasSkill()) {
                        setSkill(other.getSkill());
                    }
                    if (other.hasLevel()) {
                        setLevel(other.getLevel());
                    }
                    this.mergeUnknownFields(other.getUnknownFields());
                    return this;
                }

                public final boolean isInitialized() {
                    if (!hasSkill()) {

                        return false;
                    }
                    if (!hasLevel()) {

                        return false;
                    }
                    return true;
                }

                public Builder mergeFrom(
                        com.google.protobuf.CodedInputStream input,
                        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                        throws java.io.IOException {
                    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                            com.google.protobuf.UnknownFieldSet.newBuilder(
                                    this.getUnknownFields());
                    while (true) {
                        int tag = input.readTag();
                        switch (tag) {
                            case 0:
                                this.setUnknownFields(unknownFields.build());
                                onChanged();
                                return this;
                            default: {
                                if (!parseUnknownField(input, unknownFields,
                                        extensionRegistry, tag)) {
                                    this.setUnknownFields(unknownFields.build());
                                    onChanged();
                                    return this;
                                }
                                break;
                            }
                            case 8: {
                                bitField0_ |= 0x00000001;
                                skill_ = input.readInt32();
                                break;
                            }
                            case 16: {
                                bitField0_ |= 0x00000002;
                                level_ = input.readInt32();
                                break;
                            }
                        }
                    }
                }

                public boolean hasSkill() {
                    return ((bitField0_ & 0x00000001) == 0x00000001);
                }

                public int getSkill() {
                    return skill_;
                }

                public Builder setSkill(int value) {
                    bitField0_ |= 0x00000001;
                    skill_ = value;
                    onChanged();
                    return this;
                }

                public Builder clearSkill() {
                    bitField0_ = (bitField0_ & ~0x00000001);
                    skill_ = 0;
                    onChanged();
                    return this;
                }

                public boolean hasLevel() {
                    return ((bitField0_ & 0x00000002) == 0x00000002);
                }

                public int getLevel() {
                    return level_;
                }

                public Builder setLevel(int value) {
                    bitField0_ |= 0x00000002;
                    level_ = value;
                    onChanged();
                    return this;
                }

                public Builder clearLevel() {
                    bitField0_ = (bitField0_ & ~0x00000002);
                    level_ = 0;
                    onChanged();
                    return this;
                }

                // @@protoc_insertion_point(builder_scope:Battle_Unit.Skill)
            }

            // @@protoc_insertion_point(class_scope:Battle_Unit.Skill)
        }

        public static final class Builder extends
                com.google.protobuf.GeneratedMessage.Builder<Builder>
                implements com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_UnitOrBuilder {
            private int bitField0_;
            private int bitField1_;
            // optional int32 battleUnitID = 1;
            private int battleUnitID_;
            // optional int32 unitLevel = 2;
            private int unitLevel_;
            // optional int32 storageNum = 3;
            private int storageNum_;
            // optional int32 campID = 4;
            private int campID_;
            // optional int32 type = 5;
            private int type_;
            // optional int32 subType = 6;
            private int subType_;
            // optional int32 cannonType = 7;
            private int cannonType_;
            // optional int32 modelAmount = 8;
            private int modelAmount_;
            // optional int32 effectID = 9;
            private int effectID_;
            // optional int32 nameInCh = 10;
            private int nameInCh_;
            // optional int32 nameInEn = 11;
            private int nameInEn_;
            // optional string model = 12;
            private Object model_ = "";
            // optional string icon = 13;
            private Object icon_ = "";
            // optional int32 health = 14;
            private int health_;
            // optional int32 attackDamage = 15;
            private int attackDamage_;
            // optional int32 frontArmor = 16;
            private int frontArmor_;
            // optional int32 sideArmor = 17;
            private int sideArmor_;
            // optional float attackFrequency = 18;
            private float attackFrequency_;
            // optional float attackRange = 19;
            private float attackRange_;
            // optional float disAttackRange = 20;
            private float disAttackRange_;
            // optional float sightRange = 21;
            private float sightRange_;
            // optional float speedOnGrass = 22;
            private float speedOnGrass_;
            // optional float speedOnHill = 23;
            private float speedOnHill_;
            // optional float speedOnSand = 24;
            private float speedOnSand_;
            // optional float speedOnSnow = 25;
            private float speedOnSnow_;
            // optional float speedOnRoad = 26;
            private float speedOnRoad_;
            // optional float rotationSpeed = 27;
            private float rotationSpeed_;
            // optional float accurateRate = 28;
            private float accurateRate_;
            // optional float dodgeRate = 29;
            private float dodgeRate_;
            // optional float critRate = 30;
            private float critRate_;
            // optional float innerRange = 31;
            private float innerRange_;
            // optional float innerDamageRate = 32;
            private float innerDamageRate_;
            // optional float outerRange = 33;
            private float outerRange_;
            // optional float outerDamageRate = 34;
            private float outerDamageRate_;
            // optional string speedForView = 35;
            private Object speedForView_ = "";
            // optional string enginePowerForView = 36;
            private Object enginePowerForView_ = "";
            // optional string weightForView = 37;
            private Object weightForView_ = "";
            // optional int32 rewardPower = 38;
            private int rewardPower_;
            // optional string deathParticle = 39;
            private Object deathParticle_ = "";
            // optional string deathAction = 40;
            private Object deathAction_ = "";
            // optional int32 classLevel = 41;
            private int classLevel_;
            // repeated .Battle_Unit.Skill skill = 44;
            private java.util.List<com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.Skill> skill_ =
                    java.util.Collections.emptyList();
            private com.google.protobuf.RepeatedFieldBuilder<
                    com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.Skill, com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.Skill.Builder, com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.SkillOrBuilder> skillBuilder_;

            // Construct using com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return com.pkuvr.game_server.proto.commons.BI_Battle_Unit.internal_static_Battle_Unit_descriptor;
            }

            private static Builder create() {
                return new Builder();
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return com.pkuvr.game_server.proto.commons.BI_Battle_Unit.internal_static_Battle_Unit_fieldAccessorTable;
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                    getSkillFieldBuilder();
                }
            }

            public Builder clear() {
                super.clear();
                battleUnitID_ = 0;
                bitField0_ = (bitField0_ & ~0x00000001);
                unitLevel_ = 0;
                bitField0_ = (bitField0_ & ~0x00000002);
                storageNum_ = 0;
                bitField0_ = (bitField0_ & ~0x00000004);
                campID_ = 0;
                bitField0_ = (bitField0_ & ~0x00000008);
                type_ = 0;
                bitField0_ = (bitField0_ & ~0x00000010);
                subType_ = 0;
                bitField0_ = (bitField0_ & ~0x00000020);
                cannonType_ = 0;
                bitField0_ = (bitField0_ & ~0x00000040);
                modelAmount_ = 0;
                bitField0_ = (bitField0_ & ~0x00000080);
                effectID_ = 0;
                bitField0_ = (bitField0_ & ~0x00000100);
                nameInCh_ = 0;
                bitField0_ = (bitField0_ & ~0x00000200);
                nameInEn_ = 0;
                bitField0_ = (bitField0_ & ~0x00000400);
                model_ = "";
                bitField0_ = (bitField0_ & ~0x00000800);
                icon_ = "";
                bitField0_ = (bitField0_ & ~0x00001000);
                health_ = 0;
                bitField0_ = (bitField0_ & ~0x00002000);
                attackDamage_ = 0;
                bitField0_ = (bitField0_ & ~0x00004000);
                frontArmor_ = 0;
                bitField0_ = (bitField0_ & ~0x00008000);
                sideArmor_ = 0;
                bitField0_ = (bitField0_ & ~0x00010000);
                attackFrequency_ = 0F;
                bitField0_ = (bitField0_ & ~0x00020000);
                attackRange_ = 0F;
                bitField0_ = (bitField0_ & ~0x00040000);
                disAttackRange_ = 0F;
                bitField0_ = (bitField0_ & ~0x00080000);
                sightRange_ = 0F;
                bitField0_ = (bitField0_ & ~0x00100000);
                speedOnGrass_ = 0F;
                bitField0_ = (bitField0_ & ~0x00200000);
                speedOnHill_ = 0F;
                bitField0_ = (bitField0_ & ~0x00400000);
                speedOnSand_ = 0F;
                bitField0_ = (bitField0_ & ~0x00800000);
                speedOnSnow_ = 0F;
                bitField0_ = (bitField0_ & ~0x01000000);
                speedOnRoad_ = 0F;
                bitField0_ = (bitField0_ & ~0x02000000);
                rotationSpeed_ = 0F;
                bitField0_ = (bitField0_ & ~0x04000000);
                accurateRate_ = 0F;
                bitField0_ = (bitField0_ & ~0x08000000);
                dodgeRate_ = 0F;
                bitField0_ = (bitField0_ & ~0x10000000);
                critRate_ = 0F;
                bitField0_ = (bitField0_ & ~0x20000000);
                innerRange_ = 0F;
                bitField0_ = (bitField0_ & ~0x40000000);
                innerDamageRate_ = 0F;
                bitField0_ = (bitField0_ & ~0x80000000);
                outerRange_ = 0F;
                bitField1_ = (bitField1_ & ~0x00000001);
                outerDamageRate_ = 0F;
                bitField1_ = (bitField1_ & ~0x00000002);
                speedForView_ = "";
                bitField1_ = (bitField1_ & ~0x00000004);
                enginePowerForView_ = "";
                bitField1_ = (bitField1_ & ~0x00000008);
                weightForView_ = "";
                bitField1_ = (bitField1_ & ~0x00000010);
                rewardPower_ = 0;
                bitField1_ = (bitField1_ & ~0x00000020);
                deathParticle_ = "";
                bitField1_ = (bitField1_ & ~0x00000040);
                deathAction_ = "";
                bitField1_ = (bitField1_ & ~0x00000080);
                classLevel_ = 0;
                bitField1_ = (bitField1_ & ~0x00000100);
                if (skillBuilder_ == null) {
                    skill_ = java.util.Collections.emptyList();
                    bitField1_ = (bitField1_ & ~0x00000200);
                } else {
                    skillBuilder_.clear();
                }
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.getDescriptor();
            }

            public com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit getDefaultInstanceForType() {
                return com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.getDefaultInstance();
            }

            public com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit build() {
                com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            private com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit buildParsed()
                    throws com.google.protobuf.InvalidProtocolBufferException {
                com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(
                            result).asInvalidProtocolBufferException();
                }
                return result;
            }

            public com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit buildPartial() {
                com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit result = new com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit(this);
                int from_bitField0_ = bitField0_;
                int from_bitField1_ = bitField1_;
                int to_bitField0_ = 0;
                int to_bitField1_ = 0;
                if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                    to_bitField0_ |= 0x00000001;
                }
                result.battleUnitID_ = battleUnitID_;
                if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                    to_bitField0_ |= 0x00000002;
                }
                result.unitLevel_ = unitLevel_;
                if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
                    to_bitField0_ |= 0x00000004;
                }
                result.storageNum_ = storageNum_;
                if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
                    to_bitField0_ |= 0x00000008;
                }
                result.campID_ = campID_;
                if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
                    to_bitField0_ |= 0x00000010;
                }
                result.type_ = type_;
                if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
                    to_bitField0_ |= 0x00000020;
                }
                result.subType_ = subType_;
                if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
                    to_bitField0_ |= 0x00000040;
                }
                result.cannonType_ = cannonType_;
                if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
                    to_bitField0_ |= 0x00000080;
                }
                result.modelAmount_ = modelAmount_;
                if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
                    to_bitField0_ |= 0x00000100;
                }
                result.effectID_ = effectID_;
                if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
                    to_bitField0_ |= 0x00000200;
                }
                result.nameInCh_ = nameInCh_;
                if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
                    to_bitField0_ |= 0x00000400;
                }
                result.nameInEn_ = nameInEn_;
                if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
                    to_bitField0_ |= 0x00000800;
                }
                result.model_ = model_;
                if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
                    to_bitField0_ |= 0x00001000;
                }
                result.icon_ = icon_;
                if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
                    to_bitField0_ |= 0x00002000;
                }
                result.health_ = health_;
                if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
                    to_bitField0_ |= 0x00004000;
                }
                result.attackDamage_ = attackDamage_;
                if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
                    to_bitField0_ |= 0x00008000;
                }
                result.frontArmor_ = frontArmor_;
                if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
                    to_bitField0_ |= 0x00010000;
                }
                result.sideArmor_ = sideArmor_;
                if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
                    to_bitField0_ |= 0x00020000;
                }
                result.attackFrequency_ = attackFrequency_;
                if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
                    to_bitField0_ |= 0x00040000;
                }
                result.attackRange_ = attackRange_;
                if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
                    to_bitField0_ |= 0x00080000;
                }
                result.disAttackRange_ = disAttackRange_;
                if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
                    to_bitField0_ |= 0x00100000;
                }
                result.sightRange_ = sightRange_;
                if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
                    to_bitField0_ |= 0x00200000;
                }
                result.speedOnGrass_ = speedOnGrass_;
                if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
                    to_bitField0_ |= 0x00400000;
                }
                result.speedOnHill_ = speedOnHill_;
                if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
                    to_bitField0_ |= 0x00800000;
                }
                result.speedOnSand_ = speedOnSand_;
                if (((from_bitField0_ & 0x01000000) == 0x01000000)) {
                    to_bitField0_ |= 0x01000000;
                }
                result.speedOnSnow_ = speedOnSnow_;
                if (((from_bitField0_ & 0x02000000) == 0x02000000)) {
                    to_bitField0_ |= 0x02000000;
                }
                result.speedOnRoad_ = speedOnRoad_;
                if (((from_bitField0_ & 0x04000000) == 0x04000000)) {
                    to_bitField0_ |= 0x04000000;
                }
                result.rotationSpeed_ = rotationSpeed_;
                if (((from_bitField0_ & 0x08000000) == 0x08000000)) {
                    to_bitField0_ |= 0x08000000;
                }
                result.accurateRate_ = accurateRate_;
                if (((from_bitField0_ & 0x10000000) == 0x10000000)) {
                    to_bitField0_ |= 0x10000000;
                }
                result.dodgeRate_ = dodgeRate_;
                if (((from_bitField0_ & 0x20000000) == 0x20000000)) {
                    to_bitField0_ |= 0x20000000;
                }
                result.critRate_ = critRate_;
                if (((from_bitField0_ & 0x40000000) == 0x40000000)) {
                    to_bitField0_ |= 0x40000000;
                }
                result.innerRange_ = innerRange_;
                if (((from_bitField0_ & 0x80000000) == 0x80000000)) {
                    to_bitField0_ |= 0x80000000;
                }
                result.innerDamageRate_ = innerDamageRate_;
                if (((from_bitField1_ & 0x00000001) == 0x00000001)) {
                    to_bitField1_ |= 0x00000001;
                }
                result.outerRange_ = outerRange_;
                if (((from_bitField1_ & 0x00000002) == 0x00000002)) {
                    to_bitField1_ |= 0x00000002;
                }
                result.outerDamageRate_ = outerDamageRate_;
                if (((from_bitField1_ & 0x00000004) == 0x00000004)) {
                    to_bitField1_ |= 0x00000004;
                }
                result.speedForView_ = speedForView_;
                if (((from_bitField1_ & 0x00000008) == 0x00000008)) {
                    to_bitField1_ |= 0x00000008;
                }
                result.enginePowerForView_ = enginePowerForView_;
                if (((from_bitField1_ & 0x00000010) == 0x00000010)) {
                    to_bitField1_ |= 0x00000010;
                }
                result.weightForView_ = weightForView_;
                if (((from_bitField1_ & 0x00000020) == 0x00000020)) {
                    to_bitField1_ |= 0x00000020;
                }
                result.rewardPower_ = rewardPower_;
                if (((from_bitField1_ & 0x00000040) == 0x00000040)) {
                    to_bitField1_ |= 0x00000040;
                }
                result.deathParticle_ = deathParticle_;
                if (((from_bitField1_ & 0x00000080) == 0x00000080)) {
                    to_bitField1_ |= 0x00000080;
                }
                result.deathAction_ = deathAction_;
                if (((from_bitField1_ & 0x00000100) == 0x00000100)) {
                    to_bitField1_ |= 0x00000100;
                }
                result.classLevel_ = classLevel_;
                if (skillBuilder_ == null) {
                    if (((bitField1_ & 0x00000200) == 0x00000200)) {
                        skill_ = java.util.Collections.unmodifiableList(skill_);
                        bitField1_ = (bitField1_ & ~0x00000200);
                    }
                    result.skill_ = skill_;
                } else {
                    result.skill_ = skillBuilder_.build();
                }
                result.bitField0_ = to_bitField0_;
                result.bitField1_ = to_bitField1_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit) {
                    return mergeFrom((com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit other) {
                if (other == com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.getDefaultInstance())
                    return this;
                if (other.hasBattleUnitID()) {
                    setBattleUnitID(other.getBattleUnitID());
                }
                if (other.hasUnitLevel()) {
                    setUnitLevel(other.getUnitLevel());
                }
                if (other.hasStorageNum()) {
                    setStorageNum(other.getStorageNum());
                }
                if (other.hasCampID()) {
                    setCampID(other.getCampID());
                }
                if (other.hasType()) {
                    setType(other.getType());
                }
                if (other.hasSubType()) {
                    setSubType(other.getSubType());
                }
                if (other.hasCannonType()) {
                    setCannonType(other.getCannonType());
                }
                if (other.hasModelAmount()) {
                    setModelAmount(other.getModelAmount());
                }
                if (other.hasEffectID()) {
                    setEffectID(other.getEffectID());
                }
                if (other.hasNameInCh()) {
                    setNameInCh(other.getNameInCh());
                }
                if (other.hasNameInEn()) {
                    setNameInEn(other.getNameInEn());
                }
                if (other.hasModel()) {
                    setModel(other.getModel());
                }
                if (other.hasIcon()) {
                    setIcon(other.getIcon());
                }
                if (other.hasHealth()) {
                    setHealth(other.getHealth());
                }
                if (other.hasAttackDamage()) {
                    setAttackDamage(other.getAttackDamage());
                }
                if (other.hasFrontArmor()) {
                    setFrontArmor(other.getFrontArmor());
                }
                if (other.hasSideArmor()) {
                    setSideArmor(other.getSideArmor());
                }
                if (other.hasAttackFrequency()) {
                    setAttackFrequency(other.getAttackFrequency());
                }
                if (other.hasAttackRange()) {
                    setAttackRange(other.getAttackRange());
                }
                if (other.hasDisAttackRange()) {
                    setDisAttackRange(other.getDisAttackRange());
                }
                if (other.hasSightRange()) {
                    setSightRange(other.getSightRange());
                }
                if (other.hasSpeedOnGrass()) {
                    setSpeedOnGrass(other.getSpeedOnGrass());
                }
                if (other.hasSpeedOnHill()) {
                    setSpeedOnHill(other.getSpeedOnHill());
                }
                if (other.hasSpeedOnSand()) {
                    setSpeedOnSand(other.getSpeedOnSand());
                }
                if (other.hasSpeedOnSnow()) {
                    setSpeedOnSnow(other.getSpeedOnSnow());
                }
                if (other.hasSpeedOnRoad()) {
                    setSpeedOnRoad(other.getSpeedOnRoad());
                }
                if (other.hasRotationSpeed()) {
                    setRotationSpeed(other.getRotationSpeed());
                }
                if (other.hasAccurateRate()) {
                    setAccurateRate(other.getAccurateRate());
                }
                if (other.hasDodgeRate()) {
                    setDodgeRate(other.getDodgeRate());
                }
                if (other.hasCritRate()) {
                    setCritRate(other.getCritRate());
                }
                if (other.hasInnerRange()) {
                    setInnerRange(other.getInnerRange());
                }
                if (other.hasInnerDamageRate()) {
                    setInnerDamageRate(other.getInnerDamageRate());
                }
                if (other.hasOuterRange()) {
                    setOuterRange(other.getOuterRange());
                }
                if (other.hasOuterDamageRate()) {
                    setOuterDamageRate(other.getOuterDamageRate());
                }
                if (other.hasSpeedForView()) {
                    setSpeedForView(other.getSpeedForView());
                }
                if (other.hasEnginePowerForView()) {
                    setEnginePowerForView(other.getEnginePowerForView());
                }
                if (other.hasWeightForView()) {
                    setWeightForView(other.getWeightForView());
                }
                if (other.hasRewardPower()) {
                    setRewardPower(other.getRewardPower());
                }
                if (other.hasDeathParticle()) {
                    setDeathParticle(other.getDeathParticle());
                }
                if (other.hasDeathAction()) {
                    setDeathAction(other.getDeathAction());
                }
                if (other.hasClassLevel()) {
                    setClassLevel(other.getClassLevel());
                }
                if (skillBuilder_ == null) {
                    if (!other.skill_.isEmpty()) {
                        if (skill_.isEmpty()) {
                            skill_ = other.skill_;
                            bitField1_ = (bitField1_ & ~0x00000200);
                        } else {
                            ensureSkillIsMutable();
                            skill_.addAll(other.skill_);
                        }
                        onChanged();
                    }
                } else {
                    if (!other.skill_.isEmpty()) {
                        if (skillBuilder_.isEmpty()) {
                            skillBuilder_.dispose();
                            skillBuilder_ = null;
                            skill_ = other.skill_;
                            bitField1_ = (bitField1_ & ~0x00000200);
                            skillBuilder_ =
                                    com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                                            getSkillFieldBuilder() : null;
                        } else {
                            skillBuilder_.addAllMessages(other.skill_);
                        }
                    }
                }
                this.mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                for (int i = 0; i < getSkillCount(); i++) {
                    if (!getSkill(i).isInitialized()) {

                        return false;
                    }
                }
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                        com.google.protobuf.UnknownFieldSet.newBuilder(
                                this.getUnknownFields());
                while (true) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            this.setUnknownFields(unknownFields.build());
                            onChanged();
                            return this;
                        default: {
                            if (!parseUnknownField(input, unknownFields,
                                    extensionRegistry, tag)) {
                                this.setUnknownFields(unknownFields.build());
                                onChanged();
                                return this;
                            }
                            break;
                        }
                        case 8: {
                            bitField0_ |= 0x00000001;
                            battleUnitID_ = input.readInt32();
                            break;
                        }
                        case 16: {
                            bitField0_ |= 0x00000002;
                            unitLevel_ = input.readInt32();
                            break;
                        }
                        case 24: {
                            bitField0_ |= 0x00000004;
                            storageNum_ = input.readInt32();
                            break;
                        }
                        case 32: {
                            bitField0_ |= 0x00000008;
                            campID_ = input.readInt32();
                            break;
                        }
                        case 40: {
                            bitField0_ |= 0x00000010;
                            type_ = input.readInt32();
                            break;
                        }
                        case 48: {
                            bitField0_ |= 0x00000020;
                            subType_ = input.readInt32();
                            break;
                        }
                        case 56: {
                            bitField0_ |= 0x00000040;
                            cannonType_ = input.readInt32();
                            break;
                        }
                        case 64: {
                            bitField0_ |= 0x00000080;
                            modelAmount_ = input.readInt32();
                            break;
                        }
                        case 72: {
                            bitField0_ |= 0x00000100;
                            effectID_ = input.readInt32();
                            break;
                        }
                        case 80: {
                            bitField0_ |= 0x00000200;
                            nameInCh_ = input.readInt32();
                            break;
                        }
                        case 88: {
                            bitField0_ |= 0x00000400;
                            nameInEn_ = input.readInt32();
                            break;
                        }
                        case 98: {
                            bitField0_ |= 0x00000800;
                            model_ = input.readBytes();
                            break;
                        }
                        case 106: {
                            bitField0_ |= 0x00001000;
                            icon_ = input.readBytes();
                            break;
                        }
                        case 112: {
                            bitField0_ |= 0x00002000;
                            health_ = input.readInt32();
                            break;
                        }
                        case 120: {
                            bitField0_ |= 0x00004000;
                            attackDamage_ = input.readInt32();
                            break;
                        }
                        case 128: {
                            bitField0_ |= 0x00008000;
                            frontArmor_ = input.readInt32();
                            break;
                        }
                        case 136: {
                            bitField0_ |= 0x00010000;
                            sideArmor_ = input.readInt32();
                            break;
                        }
                        case 149: {
                            bitField0_ |= 0x00020000;
                            attackFrequency_ = input.readFloat();
                            break;
                        }
                        case 157: {
                            bitField0_ |= 0x00040000;
                            attackRange_ = input.readFloat();
                            break;
                        }
                        case 165: {
                            bitField0_ |= 0x00080000;
                            disAttackRange_ = input.readFloat();
                            break;
                        }
                        case 173: {
                            bitField0_ |= 0x00100000;
                            sightRange_ = input.readFloat();
                            break;
                        }
                        case 181: {
                            bitField0_ |= 0x00200000;
                            speedOnGrass_ = input.readFloat();
                            break;
                        }
                        case 189: {
                            bitField0_ |= 0x00400000;
                            speedOnHill_ = input.readFloat();
                            break;
                        }
                        case 197: {
                            bitField0_ |= 0x00800000;
                            speedOnSand_ = input.readFloat();
                            break;
                        }
                        case 205: {
                            bitField0_ |= 0x01000000;
                            speedOnSnow_ = input.readFloat();
                            break;
                        }
                        case 213: {
                            bitField0_ |= 0x02000000;
                            speedOnRoad_ = input.readFloat();
                            break;
                        }
                        case 221: {
                            bitField0_ |= 0x04000000;
                            rotationSpeed_ = input.readFloat();
                            break;
                        }
                        case 229: {
                            bitField0_ |= 0x08000000;
                            accurateRate_ = input.readFloat();
                            break;
                        }
                        case 237: {
                            bitField0_ |= 0x10000000;
                            dodgeRate_ = input.readFloat();
                            break;
                        }
                        case 245: {
                            bitField0_ |= 0x20000000;
                            critRate_ = input.readFloat();
                            break;
                        }
                        case 253: {
                            bitField0_ |= 0x40000000;
                            innerRange_ = input.readFloat();
                            break;
                        }
                        case 261: {
                            bitField0_ |= 0x80000000;
                            innerDamageRate_ = input.readFloat();
                            break;
                        }
                        case 269: {
                            bitField1_ |= 0x00000001;
                            outerRange_ = input.readFloat();
                            break;
                        }
                        case 277: {
                            bitField1_ |= 0x00000002;
                            outerDamageRate_ = input.readFloat();
                            break;
                        }
                        case 282: {
                            bitField1_ |= 0x00000004;
                            speedForView_ = input.readBytes();
                            break;
                        }
                        case 290: {
                            bitField1_ |= 0x00000008;
                            enginePowerForView_ = input.readBytes();
                            break;
                        }
                        case 298: {
                            bitField1_ |= 0x00000010;
                            weightForView_ = input.readBytes();
                            break;
                        }
                        case 304: {
                            bitField1_ |= 0x00000020;
                            rewardPower_ = input.readInt32();
                            break;
                        }
                        case 314: {
                            bitField1_ |= 0x00000040;
                            deathParticle_ = input.readBytes();
                            break;
                        }
                        case 322: {
                            bitField1_ |= 0x00000080;
                            deathAction_ = input.readBytes();
                            break;
                        }
                        case 328: {
                            bitField1_ |= 0x00000100;
                            classLevel_ = input.readInt32();
                            break;
                        }
                        case 354: {
                            com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.Skill.Builder subBuilder = com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.Skill.newBuilder();
                            input.readMessage(subBuilder, extensionRegistry);
                            addSkill(subBuilder.buildPartial());
                            break;
                        }
                    }
                }
            }

            public boolean hasBattleUnitID() {
                return ((bitField0_ & 0x00000001) == 0x00000001);
            }

            public int getBattleUnitID() {
                return battleUnitID_;
            }

            public Builder setBattleUnitID(int value) {
                bitField0_ |= 0x00000001;
                battleUnitID_ = value;
                onChanged();
                return this;
            }

            public Builder clearBattleUnitID() {
                bitField0_ = (bitField0_ & ~0x00000001);
                battleUnitID_ = 0;
                onChanged();
                return this;
            }

            public boolean hasUnitLevel() {
                return ((bitField0_ & 0x00000002) == 0x00000002);
            }

            public int getUnitLevel() {
                return unitLevel_;
            }

            public Builder setUnitLevel(int value) {
                bitField0_ |= 0x00000002;
                unitLevel_ = value;
                onChanged();
                return this;
            }

            public Builder clearUnitLevel() {
                bitField0_ = (bitField0_ & ~0x00000002);
                unitLevel_ = 0;
                onChanged();
                return this;
            }

            public boolean hasStorageNum() {
                return ((bitField0_ & 0x00000004) == 0x00000004);
            }

            public int getStorageNum() {
                return storageNum_;
            }

            public Builder setStorageNum(int value) {
                bitField0_ |= 0x00000004;
                storageNum_ = value;
                onChanged();
                return this;
            }

            public Builder clearStorageNum() {
                bitField0_ = (bitField0_ & ~0x00000004);
                storageNum_ = 0;
                onChanged();
                return this;
            }

            public boolean hasCampID() {
                return ((bitField0_ & 0x00000008) == 0x00000008);
            }

            public int getCampID() {
                return campID_;
            }

            public Builder setCampID(int value) {
                bitField0_ |= 0x00000008;
                campID_ = value;
                onChanged();
                return this;
            }

            public Builder clearCampID() {
                bitField0_ = (bitField0_ & ~0x00000008);
                campID_ = 0;
                onChanged();
                return this;
            }

            public boolean hasType() {
                return ((bitField0_ & 0x00000010) == 0x00000010);
            }

            public int getType() {
                return type_;
            }

            public Builder setType(int value) {
                bitField0_ |= 0x00000010;
                type_ = value;
                onChanged();
                return this;
            }

            public Builder clearType() {
                bitField0_ = (bitField0_ & ~0x00000010);
                type_ = 0;
                onChanged();
                return this;
            }

            public boolean hasSubType() {
                return ((bitField0_ & 0x00000020) == 0x00000020);
            }

            public int getSubType() {
                return subType_;
            }

            public Builder setSubType(int value) {
                bitField0_ |= 0x00000020;
                subType_ = value;
                onChanged();
                return this;
            }

            public Builder clearSubType() {
                bitField0_ = (bitField0_ & ~0x00000020);
                subType_ = 0;
                onChanged();
                return this;
            }

            public boolean hasCannonType() {
                return ((bitField0_ & 0x00000040) == 0x00000040);
            }

            public int getCannonType() {
                return cannonType_;
            }

            public Builder setCannonType(int value) {
                bitField0_ |= 0x00000040;
                cannonType_ = value;
                onChanged();
                return this;
            }

            public Builder clearCannonType() {
                bitField0_ = (bitField0_ & ~0x00000040);
                cannonType_ = 0;
                onChanged();
                return this;
            }

            public boolean hasModelAmount() {
                return ((bitField0_ & 0x00000080) == 0x00000080);
            }

            public int getModelAmount() {
                return modelAmount_;
            }

            public Builder setModelAmount(int value) {
                bitField0_ |= 0x00000080;
                modelAmount_ = value;
                onChanged();
                return this;
            }

            public Builder clearModelAmount() {
                bitField0_ = (bitField0_ & ~0x00000080);
                modelAmount_ = 0;
                onChanged();
                return this;
            }

            public boolean hasEffectID() {
                return ((bitField0_ & 0x00000100) == 0x00000100);
            }

            public int getEffectID() {
                return effectID_;
            }

            public Builder setEffectID(int value) {
                bitField0_ |= 0x00000100;
                effectID_ = value;
                onChanged();
                return this;
            }

            public Builder clearEffectID() {
                bitField0_ = (bitField0_ & ~0x00000100);
                effectID_ = 0;
                onChanged();
                return this;
            }

            public boolean hasNameInCh() {
                return ((bitField0_ & 0x00000200) == 0x00000200);
            }

            public int getNameInCh() {
                return nameInCh_;
            }

            public Builder setNameInCh(int value) {
                bitField0_ |= 0x00000200;
                nameInCh_ = value;
                onChanged();
                return this;
            }

            public Builder clearNameInCh() {
                bitField0_ = (bitField0_ & ~0x00000200);
                nameInCh_ = 0;
                onChanged();
                return this;
            }

            public boolean hasNameInEn() {
                return ((bitField0_ & 0x00000400) == 0x00000400);
            }

            public int getNameInEn() {
                return nameInEn_;
            }

            public Builder setNameInEn(int value) {
                bitField0_ |= 0x00000400;
                nameInEn_ = value;
                onChanged();
                return this;
            }

            public Builder clearNameInEn() {
                bitField0_ = (bitField0_ & ~0x00000400);
                nameInEn_ = 0;
                onChanged();
                return this;
            }

            public boolean hasModel() {
                return ((bitField0_ & 0x00000800) == 0x00000800);
            }

            public String getModel() {
                Object ref = model_;
                if (!(ref instanceof String)) {
                    String s = ((com.google.protobuf.ByteString) ref).toStringUtf8();
                    model_ = s;
                    return s;
                } else {
                    return (String) ref;
                }
            }

            void setModel(com.google.protobuf.ByteString value) {
                bitField0_ |= 0x00000800;
                model_ = value;
                onChanged();
            }

            public Builder setModel(String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000800;
                model_ = value;
                onChanged();
                return this;
            }

            public Builder clearModel() {
                bitField0_ = (bitField0_ & ~0x00000800);
                model_ = getDefaultInstance().getModel();
                onChanged();
                return this;
            }

            public boolean hasIcon() {
                return ((bitField0_ & 0x00001000) == 0x00001000);
            }

            public String getIcon() {
                Object ref = icon_;
                if (!(ref instanceof String)) {
                    String s = ((com.google.protobuf.ByteString) ref).toStringUtf8();
                    icon_ = s;
                    return s;
                } else {
                    return (String) ref;
                }
            }

            void setIcon(com.google.protobuf.ByteString value) {
                bitField0_ |= 0x00001000;
                icon_ = value;
                onChanged();
            }

            public Builder setIcon(String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00001000;
                icon_ = value;
                onChanged();
                return this;
            }

            public Builder clearIcon() {
                bitField0_ = (bitField0_ & ~0x00001000);
                icon_ = getDefaultInstance().getIcon();
                onChanged();
                return this;
            }

            public boolean hasHealth() {
                return ((bitField0_ & 0x00002000) == 0x00002000);
            }

            public int getHealth() {
                return health_;
            }

            public Builder setHealth(int value) {
                bitField0_ |= 0x00002000;
                health_ = value;
                onChanged();
                return this;
            }

            public Builder clearHealth() {
                bitField0_ = (bitField0_ & ~0x00002000);
                health_ = 0;
                onChanged();
                return this;
            }

            public boolean hasAttackDamage() {
                return ((bitField0_ & 0x00004000) == 0x00004000);
            }

            public int getAttackDamage() {
                return attackDamage_;
            }

            public Builder setAttackDamage(int value) {
                bitField0_ |= 0x00004000;
                attackDamage_ = value;
                onChanged();
                return this;
            }

            public Builder clearAttackDamage() {
                bitField0_ = (bitField0_ & ~0x00004000);
                attackDamage_ = 0;
                onChanged();
                return this;
            }

            public boolean hasFrontArmor() {
                return ((bitField0_ & 0x00008000) == 0x00008000);
            }

            public int getFrontArmor() {
                return frontArmor_;
            }

            public Builder setFrontArmor(int value) {
                bitField0_ |= 0x00008000;
                frontArmor_ = value;
                onChanged();
                return this;
            }

            public Builder clearFrontArmor() {
                bitField0_ = (bitField0_ & ~0x00008000);
                frontArmor_ = 0;
                onChanged();
                return this;
            }

            public boolean hasSideArmor() {
                return ((bitField0_ & 0x00010000) == 0x00010000);
            }

            public int getSideArmor() {
                return sideArmor_;
            }

            public Builder setSideArmor(int value) {
                bitField0_ |= 0x00010000;
                sideArmor_ = value;
                onChanged();
                return this;
            }

            public Builder clearSideArmor() {
                bitField0_ = (bitField0_ & ~0x00010000);
                sideArmor_ = 0;
                onChanged();
                return this;
            }

            public boolean hasAttackFrequency() {
                return ((bitField0_ & 0x00020000) == 0x00020000);
            }

            public float getAttackFrequency() {
                return attackFrequency_;
            }

            public Builder setAttackFrequency(float value) {
                bitField0_ |= 0x00020000;
                attackFrequency_ = value;
                onChanged();
                return this;
            }

            public Builder clearAttackFrequency() {
                bitField0_ = (bitField0_ & ~0x00020000);
                attackFrequency_ = 0F;
                onChanged();
                return this;
            }

            public boolean hasAttackRange() {
                return ((bitField0_ & 0x00040000) == 0x00040000);
            }

            public float getAttackRange() {
                return attackRange_;
            }

            public Builder setAttackRange(float value) {
                bitField0_ |= 0x00040000;
                attackRange_ = value;
                onChanged();
                return this;
            }

            public Builder clearAttackRange() {
                bitField0_ = (bitField0_ & ~0x00040000);
                attackRange_ = 0F;
                onChanged();
                return this;
            }

            public boolean hasDisAttackRange() {
                return ((bitField0_ & 0x00080000) == 0x00080000);
            }

            public float getDisAttackRange() {
                return disAttackRange_;
            }

            public Builder setDisAttackRange(float value) {
                bitField0_ |= 0x00080000;
                disAttackRange_ = value;
                onChanged();
                return this;
            }

            public Builder clearDisAttackRange() {
                bitField0_ = (bitField0_ & ~0x00080000);
                disAttackRange_ = 0F;
                onChanged();
                return this;
            }

            public boolean hasSightRange() {
                return ((bitField0_ & 0x00100000) == 0x00100000);
            }

            public float getSightRange() {
                return sightRange_;
            }

            public Builder setSightRange(float value) {
                bitField0_ |= 0x00100000;
                sightRange_ = value;
                onChanged();
                return this;
            }

            public Builder clearSightRange() {
                bitField0_ = (bitField0_ & ~0x00100000);
                sightRange_ = 0F;
                onChanged();
                return this;
            }

            public boolean hasSpeedOnGrass() {
                return ((bitField0_ & 0x00200000) == 0x00200000);
            }

            public float getSpeedOnGrass() {
                return speedOnGrass_;
            }

            public Builder setSpeedOnGrass(float value) {
                bitField0_ |= 0x00200000;
                speedOnGrass_ = value;
                onChanged();
                return this;
            }

            public Builder clearSpeedOnGrass() {
                bitField0_ = (bitField0_ & ~0x00200000);
                speedOnGrass_ = 0F;
                onChanged();
                return this;
            }

            public boolean hasSpeedOnHill() {
                return ((bitField0_ & 0x00400000) == 0x00400000);
            }

            public float getSpeedOnHill() {
                return speedOnHill_;
            }

            public Builder setSpeedOnHill(float value) {
                bitField0_ |= 0x00400000;
                speedOnHill_ = value;
                onChanged();
                return this;
            }

            public Builder clearSpeedOnHill() {
                bitField0_ = (bitField0_ & ~0x00400000);
                speedOnHill_ = 0F;
                onChanged();
                return this;
            }

            public boolean hasSpeedOnSand() {
                return ((bitField0_ & 0x00800000) == 0x00800000);
            }

            public float getSpeedOnSand() {
                return speedOnSand_;
            }

            public Builder setSpeedOnSand(float value) {
                bitField0_ |= 0x00800000;
                speedOnSand_ = value;
                onChanged();
                return this;
            }

            public Builder clearSpeedOnSand() {
                bitField0_ = (bitField0_ & ~0x00800000);
                speedOnSand_ = 0F;
                onChanged();
                return this;
            }

            public boolean hasSpeedOnSnow() {
                return ((bitField0_ & 0x01000000) == 0x01000000);
            }

            public float getSpeedOnSnow() {
                return speedOnSnow_;
            }

            public Builder setSpeedOnSnow(float value) {
                bitField0_ |= 0x01000000;
                speedOnSnow_ = value;
                onChanged();
                return this;
            }

            public Builder clearSpeedOnSnow() {
                bitField0_ = (bitField0_ & ~0x01000000);
                speedOnSnow_ = 0F;
                onChanged();
                return this;
            }

            public boolean hasSpeedOnRoad() {
                return ((bitField0_ & 0x02000000) == 0x02000000);
            }

            public float getSpeedOnRoad() {
                return speedOnRoad_;
            }

            public Builder setSpeedOnRoad(float value) {
                bitField0_ |= 0x02000000;
                speedOnRoad_ = value;
                onChanged();
                return this;
            }

            public Builder clearSpeedOnRoad() {
                bitField0_ = (bitField0_ & ~0x02000000);
                speedOnRoad_ = 0F;
                onChanged();
                return this;
            }

            public boolean hasRotationSpeed() {
                return ((bitField0_ & 0x04000000) == 0x04000000);
            }

            public float getRotationSpeed() {
                return rotationSpeed_;
            }

            public Builder setRotationSpeed(float value) {
                bitField0_ |= 0x04000000;
                rotationSpeed_ = value;
                onChanged();
                return this;
            }

            public Builder clearRotationSpeed() {
                bitField0_ = (bitField0_ & ~0x04000000);
                rotationSpeed_ = 0F;
                onChanged();
                return this;
            }

            public boolean hasAccurateRate() {
                return ((bitField0_ & 0x08000000) == 0x08000000);
            }

            public float getAccurateRate() {
                return accurateRate_;
            }

            public Builder setAccurateRate(float value) {
                bitField0_ |= 0x08000000;
                accurateRate_ = value;
                onChanged();
                return this;
            }

            public Builder clearAccurateRate() {
                bitField0_ = (bitField0_ & ~0x08000000);
                accurateRate_ = 0F;
                onChanged();
                return this;
            }

            public boolean hasDodgeRate() {
                return ((bitField0_ & 0x10000000) == 0x10000000);
            }

            public float getDodgeRate() {
                return dodgeRate_;
            }

            public Builder setDodgeRate(float value) {
                bitField0_ |= 0x10000000;
                dodgeRate_ = value;
                onChanged();
                return this;
            }

            public Builder clearDodgeRate() {
                bitField0_ = (bitField0_ & ~0x10000000);
                dodgeRate_ = 0F;
                onChanged();
                return this;
            }

            public boolean hasCritRate() {
                return ((bitField0_ & 0x20000000) == 0x20000000);
            }

            public float getCritRate() {
                return critRate_;
            }

            public Builder setCritRate(float value) {
                bitField0_ |= 0x20000000;
                critRate_ = value;
                onChanged();
                return this;
            }

            public Builder clearCritRate() {
                bitField0_ = (bitField0_ & ~0x20000000);
                critRate_ = 0F;
                onChanged();
                return this;
            }

            public boolean hasInnerRange() {
                return ((bitField0_ & 0x40000000) == 0x40000000);
            }

            public float getInnerRange() {
                return innerRange_;
            }

            public Builder setInnerRange(float value) {
                bitField0_ |= 0x40000000;
                innerRange_ = value;
                onChanged();
                return this;
            }

            public Builder clearInnerRange() {
                bitField0_ = (bitField0_ & ~0x40000000);
                innerRange_ = 0F;
                onChanged();
                return this;
            }

            public boolean hasInnerDamageRate() {
                return ((bitField0_ & 0x80000000) == 0x80000000);
            }

            public float getInnerDamageRate() {
                return innerDamageRate_;
            }

            public Builder setInnerDamageRate(float value) {
                bitField0_ |= 0x80000000;
                innerDamageRate_ = value;
                onChanged();
                return this;
            }

            public Builder clearInnerDamageRate() {
                bitField0_ = (bitField0_ & ~0x80000000);
                innerDamageRate_ = 0F;
                onChanged();
                return this;
            }

            public boolean hasOuterRange() {
                return ((bitField1_ & 0x00000001) == 0x00000001);
            }

            public float getOuterRange() {
                return outerRange_;
            }

            public Builder setOuterRange(float value) {
                bitField1_ |= 0x00000001;
                outerRange_ = value;
                onChanged();
                return this;
            }

            public Builder clearOuterRange() {
                bitField1_ = (bitField1_ & ~0x00000001);
                outerRange_ = 0F;
                onChanged();
                return this;
            }

            public boolean hasOuterDamageRate() {
                return ((bitField1_ & 0x00000002) == 0x00000002);
            }

            public float getOuterDamageRate() {
                return outerDamageRate_;
            }

            public Builder setOuterDamageRate(float value) {
                bitField1_ |= 0x00000002;
                outerDamageRate_ = value;
                onChanged();
                return this;
            }

            public Builder clearOuterDamageRate() {
                bitField1_ = (bitField1_ & ~0x00000002);
                outerDamageRate_ = 0F;
                onChanged();
                return this;
            }

            public boolean hasSpeedForView() {
                return ((bitField1_ & 0x00000004) == 0x00000004);
            }

            public String getSpeedForView() {
                Object ref = speedForView_;
                if (!(ref instanceof String)) {
                    String s = ((com.google.protobuf.ByteString) ref).toStringUtf8();
                    speedForView_ = s;
                    return s;
                } else {
                    return (String) ref;
                }
            }

            void setSpeedForView(com.google.protobuf.ByteString value) {
                bitField1_ |= 0x00000004;
                speedForView_ = value;
                onChanged();
            }

            public Builder setSpeedForView(String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField1_ |= 0x00000004;
                speedForView_ = value;
                onChanged();
                return this;
            }

            public Builder clearSpeedForView() {
                bitField1_ = (bitField1_ & ~0x00000004);
                speedForView_ = getDefaultInstance().getSpeedForView();
                onChanged();
                return this;
            }

            public boolean hasEnginePowerForView() {
                return ((bitField1_ & 0x00000008) == 0x00000008);
            }

            public String getEnginePowerForView() {
                Object ref = enginePowerForView_;
                if (!(ref instanceof String)) {
                    String s = ((com.google.protobuf.ByteString) ref).toStringUtf8();
                    enginePowerForView_ = s;
                    return s;
                } else {
                    return (String) ref;
                }
            }

            void setEnginePowerForView(com.google.protobuf.ByteString value) {
                bitField1_ |= 0x00000008;
                enginePowerForView_ = value;
                onChanged();
            }

            public Builder setEnginePowerForView(String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField1_ |= 0x00000008;
                enginePowerForView_ = value;
                onChanged();
                return this;
            }

            public Builder clearEnginePowerForView() {
                bitField1_ = (bitField1_ & ~0x00000008);
                enginePowerForView_ = getDefaultInstance().getEnginePowerForView();
                onChanged();
                return this;
            }

            public boolean hasWeightForView() {
                return ((bitField1_ & 0x00000010) == 0x00000010);
            }

            public String getWeightForView() {
                Object ref = weightForView_;
                if (!(ref instanceof String)) {
                    String s = ((com.google.protobuf.ByteString) ref).toStringUtf8();
                    weightForView_ = s;
                    return s;
                } else {
                    return (String) ref;
                }
            }

            void setWeightForView(com.google.protobuf.ByteString value) {
                bitField1_ |= 0x00000010;
                weightForView_ = value;
                onChanged();
            }

            public Builder setWeightForView(String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField1_ |= 0x00000010;
                weightForView_ = value;
                onChanged();
                return this;
            }

            public Builder clearWeightForView() {
                bitField1_ = (bitField1_ & ~0x00000010);
                weightForView_ = getDefaultInstance().getWeightForView();
                onChanged();
                return this;
            }

            public boolean hasRewardPower() {
                return ((bitField1_ & 0x00000020) == 0x00000020);
            }

            public int getRewardPower() {
                return rewardPower_;
            }

            public Builder setRewardPower(int value) {
                bitField1_ |= 0x00000020;
                rewardPower_ = value;
                onChanged();
                return this;
            }

            public Builder clearRewardPower() {
                bitField1_ = (bitField1_ & ~0x00000020);
                rewardPower_ = 0;
                onChanged();
                return this;
            }

            public boolean hasDeathParticle() {
                return ((bitField1_ & 0x00000040) == 0x00000040);
            }

            public String getDeathParticle() {
                Object ref = deathParticle_;
                if (!(ref instanceof String)) {
                    String s = ((com.google.protobuf.ByteString) ref).toStringUtf8();
                    deathParticle_ = s;
                    return s;
                } else {
                    return (String) ref;
                }
            }

            void setDeathParticle(com.google.protobuf.ByteString value) {
                bitField1_ |= 0x00000040;
                deathParticle_ = value;
                onChanged();
            }

            public Builder setDeathParticle(String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField1_ |= 0x00000040;
                deathParticle_ = value;
                onChanged();
                return this;
            }

            public Builder clearDeathParticle() {
                bitField1_ = (bitField1_ & ~0x00000040);
                deathParticle_ = getDefaultInstance().getDeathParticle();
                onChanged();
                return this;
            }

            public boolean hasDeathAction() {
                return ((bitField1_ & 0x00000080) == 0x00000080);
            }

            public String getDeathAction() {
                Object ref = deathAction_;
                if (!(ref instanceof String)) {
                    String s = ((com.google.protobuf.ByteString) ref).toStringUtf8();
                    deathAction_ = s;
                    return s;
                } else {
                    return (String) ref;
                }
            }

            void setDeathAction(com.google.protobuf.ByteString value) {
                bitField1_ |= 0x00000080;
                deathAction_ = value;
                onChanged();
            }

            public Builder setDeathAction(String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField1_ |= 0x00000080;
                deathAction_ = value;
                onChanged();
                return this;
            }

            public Builder clearDeathAction() {
                bitField1_ = (bitField1_ & ~0x00000080);
                deathAction_ = getDefaultInstance().getDeathAction();
                onChanged();
                return this;
            }

            public boolean hasClassLevel() {
                return ((bitField1_ & 0x00000100) == 0x00000100);
            }

            public int getClassLevel() {
                return classLevel_;
            }

            public Builder setClassLevel(int value) {
                bitField1_ |= 0x00000100;
                classLevel_ = value;
                onChanged();
                return this;
            }

            public Builder clearClassLevel() {
                bitField1_ = (bitField1_ & ~0x00000100);
                classLevel_ = 0;
                onChanged();
                return this;
            }

            private void ensureSkillIsMutable() {
                if (!((bitField1_ & 0x00000200) == 0x00000200)) {
                    skill_ = new java.util.ArrayList<com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.Skill>(skill_);
                    bitField1_ |= 0x00000200;
                }
            }

            public java.util.List<com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.Skill> getSkillList() {
                if (skillBuilder_ == null) {
                    return java.util.Collections.unmodifiableList(skill_);
                } else {
                    return skillBuilder_.getMessageList();
                }
            }

            public int getSkillCount() {
                if (skillBuilder_ == null) {
                    return skill_.size();
                } else {
                    return skillBuilder_.getCount();
                }
            }

            public com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.Skill getSkill(int index) {
                if (skillBuilder_ == null) {
                    return skill_.get(index);
                } else {
                    return skillBuilder_.getMessage(index);
                }
            }

            public Builder setSkill(
                    int index, com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.Skill value) {
                if (skillBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureSkillIsMutable();
                    skill_.set(index, value);
                    onChanged();
                } else {
                    skillBuilder_.setMessage(index, value);
                }
                return this;
            }

            public Builder setSkill(
                    int index, com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.Skill.Builder builderForValue) {
                if (skillBuilder_ == null) {
                    ensureSkillIsMutable();
                    skill_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    skillBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            public Builder addSkill(com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.Skill value) {
                if (skillBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureSkillIsMutable();
                    skill_.add(value);
                    onChanged();
                } else {
                    skillBuilder_.addMessage(value);
                }
                return this;
            }

            public Builder addSkill(
                    int index, com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.Skill value) {
                if (skillBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureSkillIsMutable();
                    skill_.add(index, value);
                    onChanged();
                } else {
                    skillBuilder_.addMessage(index, value);
                }
                return this;
            }

            public Builder addSkill(
                    com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.Skill.Builder builderForValue) {
                if (skillBuilder_ == null) {
                    ensureSkillIsMutable();
                    skill_.add(builderForValue.build());
                    onChanged();
                } else {
                    skillBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            public Builder addSkill(
                    int index, com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.Skill.Builder builderForValue) {
                if (skillBuilder_ == null) {
                    ensureSkillIsMutable();
                    skill_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    skillBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            public Builder addAllSkill(
                    Iterable<? extends com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.Skill> values) {
                if (skillBuilder_ == null) {
                    ensureSkillIsMutable();
                    super.addAll(values, skill_);
                    onChanged();
                } else {
                    skillBuilder_.addAllMessages(values);
                }
                return this;
            }

            public Builder clearSkill() {
                if (skillBuilder_ == null) {
                    skill_ = java.util.Collections.emptyList();
                    bitField1_ = (bitField1_ & ~0x00000200);
                    onChanged();
                } else {
                    skillBuilder_.clear();
                }
                return this;
            }

            public Builder removeSkill(int index) {
                if (skillBuilder_ == null) {
                    ensureSkillIsMutable();
                    skill_.remove(index);
                    onChanged();
                } else {
                    skillBuilder_.remove(index);
                }
                return this;
            }

            public com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.Skill.Builder getSkillBuilder(
                    int index) {
                return getSkillFieldBuilder().getBuilder(index);
            }

            public com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.SkillOrBuilder getSkillOrBuilder(
                    int index) {
                if (skillBuilder_ == null) {
                    return skill_.get(index);
                } else {
                    return skillBuilder_.getMessageOrBuilder(index);
                }
            }

            public java.util.List<? extends com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.SkillOrBuilder>
            getSkillOrBuilderList() {
                if (skillBuilder_ != null) {
                    return skillBuilder_.getMessageOrBuilderList();
                } else {
                    return java.util.Collections.unmodifiableList(skill_);
                }
            }

            public com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.Skill.Builder addSkillBuilder() {
                return getSkillFieldBuilder().addBuilder(
                        com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.Skill.getDefaultInstance());
            }

            public com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.Skill.Builder addSkillBuilder(
                    int index) {
                return getSkillFieldBuilder().addBuilder(
                        index, com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.Skill.getDefaultInstance());
            }

            public java.util.List<com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.Skill.Builder>
            getSkillBuilderList() {
                return getSkillFieldBuilder().getBuilderList();
            }

            private com.google.protobuf.RepeatedFieldBuilder<
                    com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.Skill, com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.Skill.Builder, com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.SkillOrBuilder>
            getSkillFieldBuilder() {
                if (skillBuilder_ == null) {
                    skillBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
                            com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.Skill, com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.Skill.Builder, com.pkuvr.game_server.proto.commons.BI_Battle_Unit.Battle_Unit.SkillOrBuilder>(
                            skill_,
                            ((bitField1_ & 0x00000200) == 0x00000200),
                            getParentForChildren(),
                            isClean());
                    skill_ = null;
                }
                return skillBuilder_;
            }

            // @@protoc_insertion_point(builder_scope:Battle_Unit)
        }

        // @@protoc_insertion_point(class_scope:Battle_Unit)
    }

    // @@protoc_insertion_point(outer_class_scope)
}
